// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2022 21:36:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    OAC_Lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module OAC_Lab2_vlg_sample_tst(
	clk,
	clk2,
	Endereco,
	sampler_tx
);
input  clk;
input  clk2;
input [31:0] Endereco;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk2 or Endereco)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module OAC_Lab2_vlg_check_tst (
	AInverte,
	BInverte,
	Branch,
	DadosLeitura1,
	DadosLeitura2,
	DadosMem,
	EscreveMem,
	EscreveReg,
	Instrucao,
	LeMem,
	MemParaReg,
	Op0,
	Op1,
	OpAlu0,
	OpALU1,
	OrigALU,
	RegDst,
	SaidaULA,
	sampler_rx
);
input  AInverte;
input  BInverte;
input  Branch;
input [31:0] DadosLeitura1;
input [31:0] DadosLeitura2;
input [31:0] DadosMem;
input  EscreveMem;
input  EscreveReg;
input [31:0] Instrucao;
input  LeMem;
input  MemParaReg;
input  Op0;
input  Op1;
input  OpAlu0;
input  OpALU1;
input  OrigALU;
input  RegDst;
input [31:0] SaidaULA;
input sampler_rx;

reg  AInverte_expected;
reg  BInverte_expected;
reg  Branch_expected;
reg [31:0] DadosLeitura1_expected;
reg [31:0] DadosLeitura2_expected;
reg [31:0] DadosMem_expected;
reg  EscreveMem_expected;
reg  EscreveReg_expected;
reg [31:0] Instrucao_expected;
reg  LeMem_expected;
reg  MemParaReg_expected;
reg  Op0_expected;
reg  Op1_expected;
reg  OpAlu0_expected;
reg  OpALU1_expected;
reg  OrigALU_expected;
reg  RegDst_expected;
reg [31:0] SaidaULA_expected;

reg  AInverte_prev;
reg  BInverte_prev;
reg  Branch_prev;
reg [31:0] DadosLeitura1_prev;
reg [31:0] DadosLeitura2_prev;
reg [31:0] DadosMem_prev;
reg  EscreveMem_prev;
reg  EscreveReg_prev;
reg [31:0] Instrucao_prev;
reg  LeMem_prev;
reg  MemParaReg_prev;
reg  Op0_prev;
reg  Op1_prev;
reg  OpAlu0_prev;
reg  OpALU1_prev;
reg  OrigALU_prev;
reg  RegDst_prev;
reg [31:0] SaidaULA_prev;

reg  AInverte_expected_prev;
reg  BInverte_expected_prev;
reg  Branch_expected_prev;
reg [31:0] DadosLeitura1_expected_prev;
reg [31:0] DadosLeitura2_expected_prev;
reg [31:0] DadosMem_expected_prev;
reg  EscreveMem_expected_prev;
reg  EscreveReg_expected_prev;
reg [31:0] Instrucao_expected_prev;
reg  LeMem_expected_prev;
reg  MemParaReg_expected_prev;
reg  Op0_expected_prev;
reg  Op1_expected_prev;
reg  OpAlu0_expected_prev;
reg  OpALU1_expected_prev;
reg  OrigALU_expected_prev;
reg  RegDst_expected_prev;
reg [31:0] SaidaULA_expected_prev;

reg  last_AInverte_exp;
reg  last_BInverte_exp;
reg  last_Branch_exp;
reg [31:0] last_DadosLeitura1_exp;
reg [31:0] last_DadosLeitura2_exp;
reg [31:0] last_DadosMem_exp;
reg  last_EscreveMem_exp;
reg  last_EscreveReg_exp;
reg [31:0] last_Instrucao_exp;
reg  last_LeMem_exp;
reg  last_MemParaReg_exp;
reg  last_Op0_exp;
reg  last_Op1_exp;
reg  last_OpAlu0_exp;
reg  last_OpALU1_exp;
reg  last_OrigALU_exp;
reg  last_RegDst_exp;
reg [31:0] last_SaidaULA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	AInverte_prev = AInverte;
	BInverte_prev = BInverte;
	Branch_prev = Branch;
	DadosLeitura1_prev = DadosLeitura1;
	DadosLeitura2_prev = DadosLeitura2;
	DadosMem_prev = DadosMem;
	EscreveMem_prev = EscreveMem;
	EscreveReg_prev = EscreveReg;
	Instrucao_prev = Instrucao;
	LeMem_prev = LeMem;
	MemParaReg_prev = MemParaReg;
	Op0_prev = Op0;
	Op1_prev = Op1;
	OpAlu0_prev = OpAlu0;
	OpALU1_prev = OpALU1;
	OrigALU_prev = OrigALU;
	RegDst_prev = RegDst;
	SaidaULA_prev = SaidaULA;
end

// update expected /o prevs

always @(trigger)
begin
	AInverte_expected_prev = AInverte_expected;
	BInverte_expected_prev = BInverte_expected;
	Branch_expected_prev = Branch_expected;
	DadosLeitura1_expected_prev = DadosLeitura1_expected;
	DadosLeitura2_expected_prev = DadosLeitura2_expected;
	DadosMem_expected_prev = DadosMem_expected;
	EscreveMem_expected_prev = EscreveMem_expected;
	EscreveReg_expected_prev = EscreveReg_expected;
	Instrucao_expected_prev = Instrucao_expected;
	LeMem_expected_prev = LeMem_expected;
	MemParaReg_expected_prev = MemParaReg_expected;
	Op0_expected_prev = Op0_expected;
	Op1_expected_prev = Op1_expected;
	OpAlu0_expected_prev = OpAlu0_expected;
	OpALU1_expected_prev = OpALU1_expected;
	OrigALU_expected_prev = OrigALU_expected;
	RegDst_expected_prev = RegDst_expected;
	SaidaULA_expected_prev = SaidaULA_expected;
end


// expected DadosLeitura1[ 31 ]
initial
begin
	DadosLeitura1_expected[31] = 1'bX;
	DadosLeitura1_expected[31] = #29000 1'b0;
end 
// expected DadosLeitura1[ 30 ]
initial
begin
	DadosLeitura1_expected[30] = 1'bX;
	DadosLeitura1_expected[30] = #29000 1'b0;
end 
// expected DadosLeitura1[ 29 ]
initial
begin
	DadosLeitura1_expected[29] = 1'bX;
	DadosLeitura1_expected[29] = #29000 1'b0;
end 
// expected DadosLeitura1[ 28 ]
initial
begin
	DadosLeitura1_expected[28] = 1'bX;
	DadosLeitura1_expected[28] = #29000 1'b0;
end 
// expected DadosLeitura1[ 27 ]
initial
begin
	DadosLeitura1_expected[27] = 1'bX;
	DadosLeitura1_expected[27] = #29000 1'b0;
end 
// expected DadosLeitura1[ 26 ]
initial
begin
	DadosLeitura1_expected[26] = 1'bX;
	DadosLeitura1_expected[26] = #29000 1'b0;
end 
// expected DadosLeitura1[ 25 ]
initial
begin
	DadosLeitura1_expected[25] = 1'bX;
	DadosLeitura1_expected[25] = #29000 1'b0;
end 
// expected DadosLeitura1[ 24 ]
initial
begin
	DadosLeitura1_expected[24] = 1'bX;
	DadosLeitura1_expected[24] = #29000 1'b0;
end 
// expected DadosLeitura1[ 23 ]
initial
begin
	DadosLeitura1_expected[23] = 1'bX;
	DadosLeitura1_expected[23] = #29000 1'b0;
end 
// expected DadosLeitura1[ 22 ]
initial
begin
	DadosLeitura1_expected[22] = 1'bX;
	DadosLeitura1_expected[22] = #29000 1'b0;
end 
// expected DadosLeitura1[ 21 ]
initial
begin
	DadosLeitura1_expected[21] = 1'bX;
	DadosLeitura1_expected[21] = #29000 1'b0;
end 
// expected DadosLeitura1[ 20 ]
initial
begin
	DadosLeitura1_expected[20] = 1'bX;
	DadosLeitura1_expected[20] = #29000 1'b0;
end 
// expected DadosLeitura1[ 19 ]
initial
begin
	DadosLeitura1_expected[19] = 1'bX;
	DadosLeitura1_expected[19] = #29000 1'b0;
end 
// expected DadosLeitura1[ 18 ]
initial
begin
	DadosLeitura1_expected[18] = 1'bX;
	DadosLeitura1_expected[18] = #29000 1'b0;
end 
// expected DadosLeitura1[ 17 ]
initial
begin
	DadosLeitura1_expected[17] = 1'bX;
	DadosLeitura1_expected[17] = #29000 1'b0;
end 
// expected DadosLeitura1[ 16 ]
initial
begin
	DadosLeitura1_expected[16] = 1'bX;
	DadosLeitura1_expected[16] = #29000 1'b0;
end 
// expected DadosLeitura1[ 15 ]
initial
begin
	DadosLeitura1_expected[15] = 1'bX;
	DadosLeitura1_expected[15] = #29000 1'b0;
end 
// expected DadosLeitura1[ 14 ]
initial
begin
	DadosLeitura1_expected[14] = 1'bX;
	DadosLeitura1_expected[14] = #29000 1'b0;
end 
// expected DadosLeitura1[ 13 ]
initial
begin
	DadosLeitura1_expected[13] = 1'bX;
	DadosLeitura1_expected[13] = #29000 1'b0;
end 
// expected DadosLeitura1[ 12 ]
initial
begin
	DadosLeitura1_expected[12] = 1'bX;
	DadosLeitura1_expected[12] = #29000 1'b0;
end 
// expected DadosLeitura1[ 11 ]
initial
begin
	DadosLeitura1_expected[11] = 1'bX;
	DadosLeitura1_expected[11] = #29000 1'b0;
end 
// expected DadosLeitura1[ 10 ]
initial
begin
	DadosLeitura1_expected[10] = 1'bX;
	DadosLeitura1_expected[10] = #29000 1'b0;
end 
// expected DadosLeitura1[ 9 ]
initial
begin
	DadosLeitura1_expected[9] = 1'bX;
	DadosLeitura1_expected[9] = #29000 1'b0;
end 
// expected DadosLeitura1[ 8 ]
initial
begin
	DadosLeitura1_expected[8] = 1'bX;
	DadosLeitura1_expected[8] = #29000 1'b0;
end 
// expected DadosLeitura1[ 7 ]
initial
begin
	DadosLeitura1_expected[7] = 1'bX;
	DadosLeitura1_expected[7] = #29000 1'b0;
end 
// expected DadosLeitura1[ 6 ]
initial
begin
	DadosLeitura1_expected[6] = 1'bX;
	DadosLeitura1_expected[6] = #29000 1'b0;
end 
// expected DadosLeitura1[ 5 ]
initial
begin
	DadosLeitura1_expected[5] = 1'bX;
	DadosLeitura1_expected[5] = #29000 1'b0;
end 
// expected DadosLeitura1[ 4 ]
initial
begin
	DadosLeitura1_expected[4] = 1'bX;
	DadosLeitura1_expected[4] = #29000 1'b0;
end 
// expected DadosLeitura1[ 3 ]
initial
begin
	DadosLeitura1_expected[3] = 1'bX;
	DadosLeitura1_expected[3] = #29000 1'b0;
end 
// expected DadosLeitura1[ 2 ]
initial
begin
	DadosLeitura1_expected[2] = 1'bX;
	DadosLeitura1_expected[2] = #29000 1'b0;
end 
// expected DadosLeitura1[ 1 ]
initial
begin
	DadosLeitura1_expected[1] = 1'bX;
	DadosLeitura1_expected[1] = #29000 1'b0;
end 
// expected DadosLeitura1[ 0 ]
initial
begin
	DadosLeitura1_expected[0] = 1'bX;
	DadosLeitura1_expected[0] = #29000 1'b0;
end 
// expected DadosLeitura2[ 31 ]
initial
begin
	DadosLeitura2_expected[31] = 1'bX;
	DadosLeitura2_expected[31] = #29000 1'b0;
end 
// expected DadosLeitura2[ 30 ]
initial
begin
	DadosLeitura2_expected[30] = 1'bX;
	DadosLeitura2_expected[30] = #29000 1'b0;
end 
// expected DadosLeitura2[ 29 ]
initial
begin
	DadosLeitura2_expected[29] = 1'bX;
	DadosLeitura2_expected[29] = #29000 1'b0;
end 
// expected DadosLeitura2[ 28 ]
initial
begin
	DadosLeitura2_expected[28] = 1'bX;
	DadosLeitura2_expected[28] = #29000 1'b0;
end 
// expected DadosLeitura2[ 27 ]
initial
begin
	DadosLeitura2_expected[27] = 1'bX;
	DadosLeitura2_expected[27] = #29000 1'b0;
end 
// expected DadosLeitura2[ 26 ]
initial
begin
	DadosLeitura2_expected[26] = 1'bX;
	DadosLeitura2_expected[26] = #29000 1'b0;
end 
// expected DadosLeitura2[ 25 ]
initial
begin
	DadosLeitura2_expected[25] = 1'bX;
	DadosLeitura2_expected[25] = #29000 1'b0;
end 
// expected DadosLeitura2[ 24 ]
initial
begin
	DadosLeitura2_expected[24] = 1'bX;
	DadosLeitura2_expected[24] = #29000 1'b0;
end 
// expected DadosLeitura2[ 23 ]
initial
begin
	DadosLeitura2_expected[23] = 1'bX;
	DadosLeitura2_expected[23] = #29000 1'b0;
end 
// expected DadosLeitura2[ 22 ]
initial
begin
	DadosLeitura2_expected[22] = 1'bX;
	DadosLeitura2_expected[22] = #29000 1'b0;
end 
// expected DadosLeitura2[ 21 ]
initial
begin
	DadosLeitura2_expected[21] = 1'bX;
	DadosLeitura2_expected[21] = #29000 1'b0;
end 
// expected DadosLeitura2[ 20 ]
initial
begin
	DadosLeitura2_expected[20] = 1'bX;
	DadosLeitura2_expected[20] = #29000 1'b0;
end 
// expected DadosLeitura2[ 19 ]
initial
begin
	DadosLeitura2_expected[19] = 1'bX;
	DadosLeitura2_expected[19] = #29000 1'b0;
end 
// expected DadosLeitura2[ 18 ]
initial
begin
	DadosLeitura2_expected[18] = 1'bX;
	DadosLeitura2_expected[18] = #29000 1'b0;
end 
// expected DadosLeitura2[ 17 ]
initial
begin
	DadosLeitura2_expected[17] = 1'bX;
	DadosLeitura2_expected[17] = #29000 1'b0;
end 
// expected DadosLeitura2[ 16 ]
initial
begin
	DadosLeitura2_expected[16] = 1'bX;
	DadosLeitura2_expected[16] = #29000 1'b0;
end 
// expected DadosLeitura2[ 15 ]
initial
begin
	DadosLeitura2_expected[15] = 1'bX;
	DadosLeitura2_expected[15] = #29000 1'b0;
end 
// expected DadosLeitura2[ 14 ]
initial
begin
	DadosLeitura2_expected[14] = 1'bX;
	DadosLeitura2_expected[14] = #29000 1'b0;
end 
// expected DadosLeitura2[ 13 ]
initial
begin
	DadosLeitura2_expected[13] = 1'bX;
	DadosLeitura2_expected[13] = #29000 1'b0;
end 
// expected DadosLeitura2[ 12 ]
initial
begin
	DadosLeitura2_expected[12] = 1'bX;
	DadosLeitura2_expected[12] = #29000 1'b0;
end 
// expected DadosLeitura2[ 11 ]
initial
begin
	DadosLeitura2_expected[11] = 1'bX;
	DadosLeitura2_expected[11] = #29000 1'b0;
end 
// expected DadosLeitura2[ 10 ]
initial
begin
	DadosLeitura2_expected[10] = 1'bX;
	DadosLeitura2_expected[10] = #29000 1'b0;
end 
// expected DadosLeitura2[ 9 ]
initial
begin
	DadosLeitura2_expected[9] = 1'bX;
	DadosLeitura2_expected[9] = #29000 1'b0;
end 
// expected DadosLeitura2[ 8 ]
initial
begin
	DadosLeitura2_expected[8] = 1'bX;
	DadosLeitura2_expected[8] = #29000 1'b0;
end 
// expected DadosLeitura2[ 7 ]
initial
begin
	DadosLeitura2_expected[7] = 1'bX;
	DadosLeitura2_expected[7] = #29000 1'b0;
end 
// expected DadosLeitura2[ 6 ]
initial
begin
	DadosLeitura2_expected[6] = 1'bX;
	DadosLeitura2_expected[6] = #29000 1'b0;
end 
// expected DadosLeitura2[ 5 ]
initial
begin
	DadosLeitura2_expected[5] = 1'bX;
	DadosLeitura2_expected[5] = #29000 1'b0;
end 
// expected DadosLeitura2[ 4 ]
initial
begin
	DadosLeitura2_expected[4] = 1'bX;
	DadosLeitura2_expected[4] = #29000 1'b0;
end 
// expected DadosLeitura2[ 3 ]
initial
begin
	DadosLeitura2_expected[3] = 1'bX;
	DadosLeitura2_expected[3] = #29000 1'b0;
end 
// expected DadosLeitura2[ 2 ]
initial
begin
	DadosLeitura2_expected[2] = 1'bX;
	DadosLeitura2_expected[2] = #29000 1'b0;
end 
// expected DadosLeitura2[ 1 ]
initial
begin
	DadosLeitura2_expected[1] = 1'bX;
	DadosLeitura2_expected[1] = #29000 1'b0;
end 
// expected DadosLeitura2[ 0 ]
initial
begin
	DadosLeitura2_expected[0] = 1'bX;
	DadosLeitura2_expected[0] = #29000 1'b0;
end 
// expected DadosMem[ 31 ]
initial
begin
	DadosMem_expected[31] = 1'bX;
	DadosMem_expected[31] = #29000 1'b0;
end 
// expected DadosMem[ 30 ]
initial
begin
	DadosMem_expected[30] = 1'bX;
	DadosMem_expected[30] = #29000 1'b0;
end 
// expected DadosMem[ 29 ]
initial
begin
	DadosMem_expected[29] = 1'bX;
	DadosMem_expected[29] = #29000 1'b0;
end 
// expected DadosMem[ 28 ]
initial
begin
	DadosMem_expected[28] = 1'bX;
	DadosMem_expected[28] = #29000 1'b0;
end 
// expected DadosMem[ 27 ]
initial
begin
	DadosMem_expected[27] = 1'bX;
	DadosMem_expected[27] = #29000 1'b0;
end 
// expected DadosMem[ 26 ]
initial
begin
	DadosMem_expected[26] = 1'bX;
	DadosMem_expected[26] = #29000 1'b0;
end 
// expected DadosMem[ 25 ]
initial
begin
	DadosMem_expected[25] = 1'bX;
	DadosMem_expected[25] = #29000 1'b0;
end 
// expected DadosMem[ 24 ]
initial
begin
	DadosMem_expected[24] = 1'bX;
	DadosMem_expected[24] = #29000 1'b0;
end 
// expected DadosMem[ 23 ]
initial
begin
	DadosMem_expected[23] = 1'bX;
	DadosMem_expected[23] = #29000 1'b0;
end 
// expected DadosMem[ 22 ]
initial
begin
	DadosMem_expected[22] = 1'bX;
	DadosMem_expected[22] = #29000 1'b0;
end 
// expected DadosMem[ 21 ]
initial
begin
	DadosMem_expected[21] = 1'bX;
	DadosMem_expected[21] = #29000 1'b0;
end 
// expected DadosMem[ 20 ]
initial
begin
	DadosMem_expected[20] = 1'bX;
	DadosMem_expected[20] = #29000 1'b0;
end 
// expected DadosMem[ 19 ]
initial
begin
	DadosMem_expected[19] = 1'bX;
	DadosMem_expected[19] = #29000 1'b0;
end 
// expected DadosMem[ 18 ]
initial
begin
	DadosMem_expected[18] = 1'bX;
	DadosMem_expected[18] = #29000 1'b0;
end 
// expected DadosMem[ 17 ]
initial
begin
	DadosMem_expected[17] = 1'bX;
	DadosMem_expected[17] = #29000 1'b0;
end 
// expected DadosMem[ 16 ]
initial
begin
	DadosMem_expected[16] = 1'bX;
	DadosMem_expected[16] = #29000 1'b0;
end 
// expected DadosMem[ 15 ]
initial
begin
	DadosMem_expected[15] = 1'bX;
	DadosMem_expected[15] = #29000 1'b0;
end 
// expected DadosMem[ 14 ]
initial
begin
	DadosMem_expected[14] = 1'bX;
	DadosMem_expected[14] = #29000 1'b0;
end 
// expected DadosMem[ 13 ]
initial
begin
	DadosMem_expected[13] = 1'bX;
	DadosMem_expected[13] = #29000 1'b0;
end 
// expected DadosMem[ 12 ]
initial
begin
	DadosMem_expected[12] = 1'bX;
	DadosMem_expected[12] = #29000 1'b0;
end 
// expected DadosMem[ 11 ]
initial
begin
	DadosMem_expected[11] = 1'bX;
	DadosMem_expected[11] = #29000 1'b0;
end 
// expected DadosMem[ 10 ]
initial
begin
	DadosMem_expected[10] = 1'bX;
	DadosMem_expected[10] = #29000 1'b0;
end 
// expected DadosMem[ 9 ]
initial
begin
	DadosMem_expected[9] = 1'bX;
	DadosMem_expected[9] = #29000 1'b0;
end 
// expected DadosMem[ 8 ]
initial
begin
	DadosMem_expected[8] = 1'bX;
	DadosMem_expected[8] = #29000 1'b0;
end 
// expected DadosMem[ 7 ]
initial
begin
	DadosMem_expected[7] = 1'bX;
	DadosMem_expected[7] = #29000 1'b0;
end 
// expected DadosMem[ 6 ]
initial
begin
	DadosMem_expected[6] = 1'bX;
	DadosMem_expected[6] = #29000 1'b0;
end 
// expected DadosMem[ 5 ]
initial
begin
	DadosMem_expected[5] = 1'bX;
	DadosMem_expected[5] = #29000 1'b0;
end 
// expected DadosMem[ 4 ]
initial
begin
	DadosMem_expected[4] = 1'bX;
	DadosMem_expected[4] = #29000 1'b0;
end 
// expected DadosMem[ 3 ]
initial
begin
	DadosMem_expected[3] = 1'bX;
	DadosMem_expected[3] = #29000 1'b0;
end 
// expected DadosMem[ 2 ]
initial
begin
	DadosMem_expected[2] = 1'bX;
	DadosMem_expected[2] = #29000 1'b0;
end 
// expected DadosMem[ 1 ]
initial
begin
	DadosMem_expected[1] = 1'bX;
	DadosMem_expected[1] = #29000 1'b0;
end 
// expected DadosMem[ 0 ]
initial
begin
	DadosMem_expected[0] = 1'bX;
	DadosMem_expected[0] = #29000 1'b0;
end 
// expected SaidaULA[ 31 ]
initial
begin
	SaidaULA_expected[31] = 1'bX;
	SaidaULA_expected[31] = #29000 1'b0;
end 
// expected SaidaULA[ 30 ]
initial
begin
	SaidaULA_expected[30] = 1'bX;
	SaidaULA_expected[30] = #29000 1'b0;
end 
// expected SaidaULA[ 29 ]
initial
begin
	SaidaULA_expected[29] = 1'bX;
	SaidaULA_expected[29] = #29000 1'b0;
end 
// expected SaidaULA[ 28 ]
initial
begin
	SaidaULA_expected[28] = 1'bX;
	SaidaULA_expected[28] = #29000 1'b0;
end 
// expected SaidaULA[ 27 ]
initial
begin
	SaidaULA_expected[27] = 1'bX;
	SaidaULA_expected[27] = #29000 1'b0;
end 
// expected SaidaULA[ 26 ]
initial
begin
	SaidaULA_expected[26] = 1'bX;
	SaidaULA_expected[26] = #29000 1'b0;
end 
// expected SaidaULA[ 25 ]
initial
begin
	SaidaULA_expected[25] = 1'bX;
	SaidaULA_expected[25] = #29000 1'b0;
end 
// expected SaidaULA[ 24 ]
initial
begin
	SaidaULA_expected[24] = 1'bX;
	SaidaULA_expected[24] = #29000 1'b0;
end 
// expected SaidaULA[ 23 ]
initial
begin
	SaidaULA_expected[23] = 1'bX;
	SaidaULA_expected[23] = #29000 1'b0;
end 
// expected SaidaULA[ 22 ]
initial
begin
	SaidaULA_expected[22] = 1'bX;
	SaidaULA_expected[22] = #29000 1'b0;
end 
// expected SaidaULA[ 21 ]
initial
begin
	SaidaULA_expected[21] = 1'bX;
	SaidaULA_expected[21] = #29000 1'b0;
end 
// expected SaidaULA[ 20 ]
initial
begin
	SaidaULA_expected[20] = 1'bX;
	SaidaULA_expected[20] = #29000 1'b0;
end 
// expected SaidaULA[ 19 ]
initial
begin
	SaidaULA_expected[19] = 1'bX;
	SaidaULA_expected[19] = #29000 1'b0;
end 
// expected SaidaULA[ 18 ]
initial
begin
	SaidaULA_expected[18] = 1'bX;
	SaidaULA_expected[18] = #29000 1'b0;
end 
// expected SaidaULA[ 17 ]
initial
begin
	SaidaULA_expected[17] = 1'bX;
	SaidaULA_expected[17] = #29000 1'b0;
end 
// expected SaidaULA[ 16 ]
initial
begin
	SaidaULA_expected[16] = 1'bX;
	SaidaULA_expected[16] = #29000 1'b0;
end 
// expected SaidaULA[ 15 ]
initial
begin
	SaidaULA_expected[15] = 1'bX;
	SaidaULA_expected[15] = #29000 1'b0;
end 
// expected SaidaULA[ 14 ]
initial
begin
	SaidaULA_expected[14] = 1'bX;
	SaidaULA_expected[14] = #29000 1'b0;
end 
// expected SaidaULA[ 13 ]
initial
begin
	SaidaULA_expected[13] = 1'bX;
	SaidaULA_expected[13] = #29000 1'b0;
end 
// expected SaidaULA[ 12 ]
initial
begin
	SaidaULA_expected[12] = 1'bX;
	SaidaULA_expected[12] = #29000 1'b0;
end 
// expected SaidaULA[ 11 ]
initial
begin
	SaidaULA_expected[11] = 1'bX;
	SaidaULA_expected[11] = #29000 1'b0;
end 
// expected SaidaULA[ 10 ]
initial
begin
	SaidaULA_expected[10] = 1'bX;
	SaidaULA_expected[10] = #29000 1'b0;
end 
// expected SaidaULA[ 9 ]
initial
begin
	SaidaULA_expected[9] = 1'bX;
	SaidaULA_expected[9] = #29000 1'b0;
end 
// expected SaidaULA[ 8 ]
initial
begin
	SaidaULA_expected[8] = 1'bX;
	SaidaULA_expected[8] = #29000 1'b0;
end 
// expected SaidaULA[ 7 ]
initial
begin
	SaidaULA_expected[7] = 1'bX;
	SaidaULA_expected[7] = #29000 1'b0;
end 
// expected SaidaULA[ 6 ]
initial
begin
	SaidaULA_expected[6] = 1'bX;
	SaidaULA_expected[6] = #29000 1'b0;
end 
// expected SaidaULA[ 5 ]
initial
begin
	SaidaULA_expected[5] = 1'bX;
	SaidaULA_expected[5] = #29000 1'b0;
end 
// expected SaidaULA[ 4 ]
initial
begin
	SaidaULA_expected[4] = 1'bX;
	SaidaULA_expected[4] = #29000 1'b0;
end 
// expected SaidaULA[ 3 ]
initial
begin
	SaidaULA_expected[3] = 1'bX;
	SaidaULA_expected[3] = #29000 1'b0;
end 
// expected SaidaULA[ 2 ]
initial
begin
	SaidaULA_expected[2] = 1'bX;
	SaidaULA_expected[2] = #29000 1'b0;
end 
// expected SaidaULA[ 1 ]
initial
begin
	SaidaULA_expected[1] = 1'bX;
	SaidaULA_expected[1] = #29000 1'b0;
end 
// expected SaidaULA[ 0 ]
initial
begin
	SaidaULA_expected[0] = 1'bX;
	SaidaULA_expected[0] = #29000 1'b0;
end 
// expected Instrucao[ 31 ]
initial
begin
	Instrucao_expected[31] = 1'bX;
	Instrucao_expected[31] = #29000 1'b0;
end 
// expected Instrucao[ 30 ]
initial
begin
	Instrucao_expected[30] = 1'bX;
	Instrucao_expected[30] = #29000 1'b0;
end 
// expected Instrucao[ 29 ]
initial
begin
	Instrucao_expected[29] = 1'bX;
	Instrucao_expected[29] = #29000 1'b0;
end 
// expected Instrucao[ 28 ]
initial
begin
	Instrucao_expected[28] = 1'bX;
	Instrucao_expected[28] = #29000 1'b0;
end 
// expected Instrucao[ 27 ]
initial
begin
	Instrucao_expected[27] = 1'bX;
	Instrucao_expected[27] = #29000 1'b0;
end 
// expected Instrucao[ 26 ]
initial
begin
	Instrucao_expected[26] = 1'bX;
	Instrucao_expected[26] = #29000 1'b0;
end 
// expected Instrucao[ 25 ]
initial
begin
	Instrucao_expected[25] = 1'bX;
	Instrucao_expected[25] = #29000 1'b0;
end 
// expected Instrucao[ 24 ]
initial
begin
	Instrucao_expected[24] = 1'bX;
	Instrucao_expected[24] = #29000 1'b0;
end 
// expected Instrucao[ 23 ]
initial
begin
	Instrucao_expected[23] = 1'bX;
	Instrucao_expected[23] = #29000 1'b0;
end 
// expected Instrucao[ 22 ]
initial
begin
	Instrucao_expected[22] = 1'bX;
	Instrucao_expected[22] = #29000 1'b0;
end 
// expected Instrucao[ 21 ]
initial
begin
	Instrucao_expected[21] = 1'bX;
	Instrucao_expected[21] = #29000 1'b0;
end 
// expected Instrucao[ 20 ]
initial
begin
	Instrucao_expected[20] = 1'bX;
	Instrucao_expected[20] = #29000 1'b0;
end 
// expected Instrucao[ 19 ]
initial
begin
	Instrucao_expected[19] = 1'bX;
	Instrucao_expected[19] = #29000 1'b0;
end 
// expected Instrucao[ 18 ]
initial
begin
	Instrucao_expected[18] = 1'bX;
	Instrucao_expected[18] = #29000 1'b0;
end 
// expected Instrucao[ 17 ]
initial
begin
	Instrucao_expected[17] = 1'bX;
	Instrucao_expected[17] = #29000 1'b0;
end 
// expected Instrucao[ 16 ]
initial
begin
	Instrucao_expected[16] = 1'bX;
	Instrucao_expected[16] = #29000 1'b0;
end 
// expected Instrucao[ 15 ]
initial
begin
	Instrucao_expected[15] = 1'bX;
	Instrucao_expected[15] = #29000 1'b0;
end 
// expected Instrucao[ 14 ]
initial
begin
	Instrucao_expected[14] = 1'bX;
	Instrucao_expected[14] = #29000 1'b0;
end 
// expected Instrucao[ 13 ]
initial
begin
	Instrucao_expected[13] = 1'bX;
	Instrucao_expected[13] = #29000 1'b0;
end 
// expected Instrucao[ 12 ]
initial
begin
	Instrucao_expected[12] = 1'bX;
	Instrucao_expected[12] = #29000 1'b0;
end 
// expected Instrucao[ 11 ]
initial
begin
	Instrucao_expected[11] = 1'bX;
	Instrucao_expected[11] = #29000 1'b0;
end 
// expected Instrucao[ 10 ]
initial
begin
	Instrucao_expected[10] = 1'bX;
	Instrucao_expected[10] = #29000 1'b0;
end 
// expected Instrucao[ 9 ]
initial
begin
	Instrucao_expected[9] = 1'bX;
	Instrucao_expected[9] = #29000 1'b0;
end 
// expected Instrucao[ 8 ]
initial
begin
	Instrucao_expected[8] = 1'bX;
	Instrucao_expected[8] = #29000 1'b0;
end 
// expected Instrucao[ 7 ]
initial
begin
	Instrucao_expected[7] = 1'bX;
	Instrucao_expected[7] = #29000 1'b0;
end 
// expected Instrucao[ 6 ]
initial
begin
	Instrucao_expected[6] = 1'bX;
	Instrucao_expected[6] = #29000 1'b0;
end 
// expected Instrucao[ 5 ]
initial
begin
	Instrucao_expected[5] = 1'bX;
	Instrucao_expected[5] = #29000 1'b0;
end 
// expected Instrucao[ 4 ]
initial
begin
	Instrucao_expected[4] = 1'bX;
	Instrucao_expected[4] = #29000 1'b0;
end 
// expected Instrucao[ 3 ]
initial
begin
	Instrucao_expected[3] = 1'bX;
	Instrucao_expected[3] = #29000 1'b0;
end 
// expected Instrucao[ 2 ]
initial
begin
	Instrucao_expected[2] = 1'bX;
	Instrucao_expected[2] = #29000 1'b0;
end 
// expected Instrucao[ 1 ]
initial
begin
	Instrucao_expected[1] = 1'bX;
	Instrucao_expected[1] = #29000 1'b0;
end 
// expected Instrucao[ 0 ]
initial
begin
	Instrucao_expected[0] = 1'bX;
	Instrucao_expected[0] = #29000 1'b0;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
	Branch_expected = #519000 1'b0;
end 

// expected EscreveMem
initial
begin
	EscreveMem_expected = 1'bX;
	EscreveMem_expected = #519000 1'b0;
end 

// expected EscreveReg
initial
begin
	EscreveReg_expected = 1'bX;
	EscreveReg_expected = #519000 1'b0;
end 

// expected LeMem
initial
begin
	LeMem_expected = 1'bX;
	LeMem_expected = #519000 1'b0;
end 

// expected MemParaReg
initial
begin
	MemParaReg_expected = 1'bX;
	MemParaReg_expected = #519000 1'b0;
end 

// expected OpAlu0
initial
begin
	OpAlu0_expected = 1'bX;
	OpAlu0_expected = #519000 1'b0;
end 

// expected OpALU1
initial
begin
	OpALU1_expected = 1'bX;
	OpALU1_expected = #519000 1'b0;
end 

// expected OrigALU
initial
begin
	OrigALU_expected = 1'bX;
	OrigALU_expected = #519000 1'b0;
end 

// expected RegDst
initial
begin
	RegDst_expected = 1'bX;
	RegDst_expected = #519000 1'b0;
end 

// expected AInverte
initial
begin
	AInverte_expected = 1'bX;
	AInverte_expected = #519000 1'b0;
end 

// expected BInverte
initial
begin
	BInverte_expected = 1'bX;
	BInverte_expected = #519000 1'b0;
end 

// expected Op0
initial
begin
	Op0_expected = 1'bX;
	Op0_expected = #519000 1'b0;
end 

// expected Op1
initial
begin
	Op1_expected = 1'bX;
	Op1_expected = #519000 1'b0;
end 
// generate trigger
always @(AInverte_expected or AInverte or BInverte_expected or BInverte or Branch_expected or Branch or DadosLeitura1_expected or DadosLeitura1 or DadosLeitura2_expected or DadosLeitura2 or DadosMem_expected or DadosMem or EscreveMem_expected or EscreveMem or EscreveReg_expected or EscreveReg or Instrucao_expected or Instrucao or LeMem_expected or LeMem or MemParaReg_expected or MemParaReg or Op0_expected or Op0 or Op1_expected or Op1 or OpAlu0_expected or OpAlu0 or OpALU1_expected or OpALU1 or OrigALU_expected or OrigALU or RegDst_expected or RegDst or SaidaULA_expected or SaidaULA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AInverte = %b | expected BInverte = %b | expected Branch = %b | expected DadosLeitura1 = %b | expected DadosLeitura2 = %b | expected DadosMem = %b | expected EscreveMem = %b | expected EscreveReg = %b | expected Instrucao = %b | expected LeMem = %b | expected MemParaReg = %b | expected Op0 = %b | expected Op1 = %b | expected OpAlu0 = %b | expected OpALU1 = %b | expected OrigALU = %b | expected RegDst = %b | expected SaidaULA = %b | ",AInverte_expected_prev,BInverte_expected_prev,Branch_expected_prev,DadosLeitura1_expected_prev,DadosLeitura2_expected_prev,DadosMem_expected_prev,EscreveMem_expected_prev,EscreveReg_expected_prev,Instrucao_expected_prev,LeMem_expected_prev,MemParaReg_expected_prev,Op0_expected_prev,Op1_expected_prev,OpAlu0_expected_prev,OpALU1_expected_prev,OrigALU_expected_prev,RegDst_expected_prev,SaidaULA_expected_prev);
	$display("| real AInverte = %b | real BInverte = %b | real Branch = %b | real DadosLeitura1 = %b | real DadosLeitura2 = %b | real DadosMem = %b | real EscreveMem = %b | real EscreveReg = %b | real Instrucao = %b | real LeMem = %b | real MemParaReg = %b | real Op0 = %b | real Op1 = %b | real OpAlu0 = %b | real OpALU1 = %b | real OrigALU = %b | real RegDst = %b | real SaidaULA = %b | ",AInverte_prev,BInverte_prev,Branch_prev,DadosLeitura1_prev,DadosLeitura2_prev,DadosMem_prev,EscreveMem_prev,EscreveReg_prev,Instrucao_prev,LeMem_prev,MemParaReg_prev,Op0_prev,Op1_prev,OpAlu0_prev,OpALU1_prev,OrigALU_prev,RegDst_prev,SaidaULA_prev);
`endif
	if (
		( AInverte_expected_prev !== 1'bx ) && ( AInverte_prev !== AInverte_expected_prev )
		&& ((AInverte_expected_prev !== last_AInverte_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AInverte :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AInverte_expected_prev);
		$display ("     Real value = %b", AInverte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AInverte_exp = AInverte_expected_prev;
	end
	if (
		( BInverte_expected_prev !== 1'bx ) && ( BInverte_prev !== BInverte_expected_prev )
		&& ((BInverte_expected_prev !== last_BInverte_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BInverte :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BInverte_expected_prev);
		$display ("     Real value = %b", BInverte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BInverte_exp = BInverte_expected_prev;
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( DadosLeitura1_expected_prev[0] !== 1'bx ) && ( DadosLeitura1_prev[0] !== DadosLeitura1_expected_prev[0] )
		&& ((DadosLeitura1_expected_prev[0] !== last_DadosLeitura1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[0] = DadosLeitura1_expected_prev[0];
	end
	if (
		( DadosLeitura1_expected_prev[1] !== 1'bx ) && ( DadosLeitura1_prev[1] !== DadosLeitura1_expected_prev[1] )
		&& ((DadosLeitura1_expected_prev[1] !== last_DadosLeitura1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[1] = DadosLeitura1_expected_prev[1];
	end
	if (
		( DadosLeitura1_expected_prev[2] !== 1'bx ) && ( DadosLeitura1_prev[2] !== DadosLeitura1_expected_prev[2] )
		&& ((DadosLeitura1_expected_prev[2] !== last_DadosLeitura1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[2] = DadosLeitura1_expected_prev[2];
	end
	if (
		( DadosLeitura1_expected_prev[3] !== 1'bx ) && ( DadosLeitura1_prev[3] !== DadosLeitura1_expected_prev[3] )
		&& ((DadosLeitura1_expected_prev[3] !== last_DadosLeitura1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[3] = DadosLeitura1_expected_prev[3];
	end
	if (
		( DadosLeitura1_expected_prev[4] !== 1'bx ) && ( DadosLeitura1_prev[4] !== DadosLeitura1_expected_prev[4] )
		&& ((DadosLeitura1_expected_prev[4] !== last_DadosLeitura1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[4] = DadosLeitura1_expected_prev[4];
	end
	if (
		( DadosLeitura1_expected_prev[5] !== 1'bx ) && ( DadosLeitura1_prev[5] !== DadosLeitura1_expected_prev[5] )
		&& ((DadosLeitura1_expected_prev[5] !== last_DadosLeitura1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[5] = DadosLeitura1_expected_prev[5];
	end
	if (
		( DadosLeitura1_expected_prev[6] !== 1'bx ) && ( DadosLeitura1_prev[6] !== DadosLeitura1_expected_prev[6] )
		&& ((DadosLeitura1_expected_prev[6] !== last_DadosLeitura1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[6] = DadosLeitura1_expected_prev[6];
	end
	if (
		( DadosLeitura1_expected_prev[7] !== 1'bx ) && ( DadosLeitura1_prev[7] !== DadosLeitura1_expected_prev[7] )
		&& ((DadosLeitura1_expected_prev[7] !== last_DadosLeitura1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[7] = DadosLeitura1_expected_prev[7];
	end
	if (
		( DadosLeitura1_expected_prev[8] !== 1'bx ) && ( DadosLeitura1_prev[8] !== DadosLeitura1_expected_prev[8] )
		&& ((DadosLeitura1_expected_prev[8] !== last_DadosLeitura1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[8] = DadosLeitura1_expected_prev[8];
	end
	if (
		( DadosLeitura1_expected_prev[9] !== 1'bx ) && ( DadosLeitura1_prev[9] !== DadosLeitura1_expected_prev[9] )
		&& ((DadosLeitura1_expected_prev[9] !== last_DadosLeitura1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[9] = DadosLeitura1_expected_prev[9];
	end
	if (
		( DadosLeitura1_expected_prev[10] !== 1'bx ) && ( DadosLeitura1_prev[10] !== DadosLeitura1_expected_prev[10] )
		&& ((DadosLeitura1_expected_prev[10] !== last_DadosLeitura1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[10] = DadosLeitura1_expected_prev[10];
	end
	if (
		( DadosLeitura1_expected_prev[11] !== 1'bx ) && ( DadosLeitura1_prev[11] !== DadosLeitura1_expected_prev[11] )
		&& ((DadosLeitura1_expected_prev[11] !== last_DadosLeitura1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[11] = DadosLeitura1_expected_prev[11];
	end
	if (
		( DadosLeitura1_expected_prev[12] !== 1'bx ) && ( DadosLeitura1_prev[12] !== DadosLeitura1_expected_prev[12] )
		&& ((DadosLeitura1_expected_prev[12] !== last_DadosLeitura1_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[12] = DadosLeitura1_expected_prev[12];
	end
	if (
		( DadosLeitura1_expected_prev[13] !== 1'bx ) && ( DadosLeitura1_prev[13] !== DadosLeitura1_expected_prev[13] )
		&& ((DadosLeitura1_expected_prev[13] !== last_DadosLeitura1_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[13] = DadosLeitura1_expected_prev[13];
	end
	if (
		( DadosLeitura1_expected_prev[14] !== 1'bx ) && ( DadosLeitura1_prev[14] !== DadosLeitura1_expected_prev[14] )
		&& ((DadosLeitura1_expected_prev[14] !== last_DadosLeitura1_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[14] = DadosLeitura1_expected_prev[14];
	end
	if (
		( DadosLeitura1_expected_prev[15] !== 1'bx ) && ( DadosLeitura1_prev[15] !== DadosLeitura1_expected_prev[15] )
		&& ((DadosLeitura1_expected_prev[15] !== last_DadosLeitura1_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[15] = DadosLeitura1_expected_prev[15];
	end
	if (
		( DadosLeitura1_expected_prev[16] !== 1'bx ) && ( DadosLeitura1_prev[16] !== DadosLeitura1_expected_prev[16] )
		&& ((DadosLeitura1_expected_prev[16] !== last_DadosLeitura1_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[16] = DadosLeitura1_expected_prev[16];
	end
	if (
		( DadosLeitura1_expected_prev[17] !== 1'bx ) && ( DadosLeitura1_prev[17] !== DadosLeitura1_expected_prev[17] )
		&& ((DadosLeitura1_expected_prev[17] !== last_DadosLeitura1_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[17] = DadosLeitura1_expected_prev[17];
	end
	if (
		( DadosLeitura1_expected_prev[18] !== 1'bx ) && ( DadosLeitura1_prev[18] !== DadosLeitura1_expected_prev[18] )
		&& ((DadosLeitura1_expected_prev[18] !== last_DadosLeitura1_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[18] = DadosLeitura1_expected_prev[18];
	end
	if (
		( DadosLeitura1_expected_prev[19] !== 1'bx ) && ( DadosLeitura1_prev[19] !== DadosLeitura1_expected_prev[19] )
		&& ((DadosLeitura1_expected_prev[19] !== last_DadosLeitura1_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[19] = DadosLeitura1_expected_prev[19];
	end
	if (
		( DadosLeitura1_expected_prev[20] !== 1'bx ) && ( DadosLeitura1_prev[20] !== DadosLeitura1_expected_prev[20] )
		&& ((DadosLeitura1_expected_prev[20] !== last_DadosLeitura1_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[20] = DadosLeitura1_expected_prev[20];
	end
	if (
		( DadosLeitura1_expected_prev[21] !== 1'bx ) && ( DadosLeitura1_prev[21] !== DadosLeitura1_expected_prev[21] )
		&& ((DadosLeitura1_expected_prev[21] !== last_DadosLeitura1_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[21] = DadosLeitura1_expected_prev[21];
	end
	if (
		( DadosLeitura1_expected_prev[22] !== 1'bx ) && ( DadosLeitura1_prev[22] !== DadosLeitura1_expected_prev[22] )
		&& ((DadosLeitura1_expected_prev[22] !== last_DadosLeitura1_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[22] = DadosLeitura1_expected_prev[22];
	end
	if (
		( DadosLeitura1_expected_prev[23] !== 1'bx ) && ( DadosLeitura1_prev[23] !== DadosLeitura1_expected_prev[23] )
		&& ((DadosLeitura1_expected_prev[23] !== last_DadosLeitura1_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[23] = DadosLeitura1_expected_prev[23];
	end
	if (
		( DadosLeitura1_expected_prev[24] !== 1'bx ) && ( DadosLeitura1_prev[24] !== DadosLeitura1_expected_prev[24] )
		&& ((DadosLeitura1_expected_prev[24] !== last_DadosLeitura1_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[24] = DadosLeitura1_expected_prev[24];
	end
	if (
		( DadosLeitura1_expected_prev[25] !== 1'bx ) && ( DadosLeitura1_prev[25] !== DadosLeitura1_expected_prev[25] )
		&& ((DadosLeitura1_expected_prev[25] !== last_DadosLeitura1_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[25] = DadosLeitura1_expected_prev[25];
	end
	if (
		( DadosLeitura1_expected_prev[26] !== 1'bx ) && ( DadosLeitura1_prev[26] !== DadosLeitura1_expected_prev[26] )
		&& ((DadosLeitura1_expected_prev[26] !== last_DadosLeitura1_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[26] = DadosLeitura1_expected_prev[26];
	end
	if (
		( DadosLeitura1_expected_prev[27] !== 1'bx ) && ( DadosLeitura1_prev[27] !== DadosLeitura1_expected_prev[27] )
		&& ((DadosLeitura1_expected_prev[27] !== last_DadosLeitura1_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[27] = DadosLeitura1_expected_prev[27];
	end
	if (
		( DadosLeitura1_expected_prev[28] !== 1'bx ) && ( DadosLeitura1_prev[28] !== DadosLeitura1_expected_prev[28] )
		&& ((DadosLeitura1_expected_prev[28] !== last_DadosLeitura1_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[28] = DadosLeitura1_expected_prev[28];
	end
	if (
		( DadosLeitura1_expected_prev[29] !== 1'bx ) && ( DadosLeitura1_prev[29] !== DadosLeitura1_expected_prev[29] )
		&& ((DadosLeitura1_expected_prev[29] !== last_DadosLeitura1_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[29] = DadosLeitura1_expected_prev[29];
	end
	if (
		( DadosLeitura1_expected_prev[30] !== 1'bx ) && ( DadosLeitura1_prev[30] !== DadosLeitura1_expected_prev[30] )
		&& ((DadosLeitura1_expected_prev[30] !== last_DadosLeitura1_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[30] = DadosLeitura1_expected_prev[30];
	end
	if (
		( DadosLeitura1_expected_prev[31] !== 1'bx ) && ( DadosLeitura1_prev[31] !== DadosLeitura1_expected_prev[31] )
		&& ((DadosLeitura1_expected_prev[31] !== last_DadosLeitura1_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura1_expected_prev);
		$display ("     Real value = %b", DadosLeitura1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DadosLeitura1_exp[31] = DadosLeitura1_expected_prev[31];
	end
	if (
		( DadosLeitura2_expected_prev[0] !== 1'bx ) && ( DadosLeitura2_prev[0] !== DadosLeitura2_expected_prev[0] )
		&& ((DadosLeitura2_expected_prev[0] !== last_DadosLeitura2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[0] = DadosLeitura2_expected_prev[0];
	end
	if (
		( DadosLeitura2_expected_prev[1] !== 1'bx ) && ( DadosLeitura2_prev[1] !== DadosLeitura2_expected_prev[1] )
		&& ((DadosLeitura2_expected_prev[1] !== last_DadosLeitura2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[1] = DadosLeitura2_expected_prev[1];
	end
	if (
		( DadosLeitura2_expected_prev[2] !== 1'bx ) && ( DadosLeitura2_prev[2] !== DadosLeitura2_expected_prev[2] )
		&& ((DadosLeitura2_expected_prev[2] !== last_DadosLeitura2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[2] = DadosLeitura2_expected_prev[2];
	end
	if (
		( DadosLeitura2_expected_prev[3] !== 1'bx ) && ( DadosLeitura2_prev[3] !== DadosLeitura2_expected_prev[3] )
		&& ((DadosLeitura2_expected_prev[3] !== last_DadosLeitura2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[3] = DadosLeitura2_expected_prev[3];
	end
	if (
		( DadosLeitura2_expected_prev[4] !== 1'bx ) && ( DadosLeitura2_prev[4] !== DadosLeitura2_expected_prev[4] )
		&& ((DadosLeitura2_expected_prev[4] !== last_DadosLeitura2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[4] = DadosLeitura2_expected_prev[4];
	end
	if (
		( DadosLeitura2_expected_prev[5] !== 1'bx ) && ( DadosLeitura2_prev[5] !== DadosLeitura2_expected_prev[5] )
		&& ((DadosLeitura2_expected_prev[5] !== last_DadosLeitura2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[5] = DadosLeitura2_expected_prev[5];
	end
	if (
		( DadosLeitura2_expected_prev[6] !== 1'bx ) && ( DadosLeitura2_prev[6] !== DadosLeitura2_expected_prev[6] )
		&& ((DadosLeitura2_expected_prev[6] !== last_DadosLeitura2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[6] = DadosLeitura2_expected_prev[6];
	end
	if (
		( DadosLeitura2_expected_prev[7] !== 1'bx ) && ( DadosLeitura2_prev[7] !== DadosLeitura2_expected_prev[7] )
		&& ((DadosLeitura2_expected_prev[7] !== last_DadosLeitura2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[7] = DadosLeitura2_expected_prev[7];
	end
	if (
		( DadosLeitura2_expected_prev[8] !== 1'bx ) && ( DadosLeitura2_prev[8] !== DadosLeitura2_expected_prev[8] )
		&& ((DadosLeitura2_expected_prev[8] !== last_DadosLeitura2_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[8] = DadosLeitura2_expected_prev[8];
	end
	if (
		( DadosLeitura2_expected_prev[9] !== 1'bx ) && ( DadosLeitura2_prev[9] !== DadosLeitura2_expected_prev[9] )
		&& ((DadosLeitura2_expected_prev[9] !== last_DadosLeitura2_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[9] = DadosLeitura2_expected_prev[9];
	end
	if (
		( DadosLeitura2_expected_prev[10] !== 1'bx ) && ( DadosLeitura2_prev[10] !== DadosLeitura2_expected_prev[10] )
		&& ((DadosLeitura2_expected_prev[10] !== last_DadosLeitura2_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[10] = DadosLeitura2_expected_prev[10];
	end
	if (
		( DadosLeitura2_expected_prev[11] !== 1'bx ) && ( DadosLeitura2_prev[11] !== DadosLeitura2_expected_prev[11] )
		&& ((DadosLeitura2_expected_prev[11] !== last_DadosLeitura2_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[11] = DadosLeitura2_expected_prev[11];
	end
	if (
		( DadosLeitura2_expected_prev[12] !== 1'bx ) && ( DadosLeitura2_prev[12] !== DadosLeitura2_expected_prev[12] )
		&& ((DadosLeitura2_expected_prev[12] !== last_DadosLeitura2_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[12] = DadosLeitura2_expected_prev[12];
	end
	if (
		( DadosLeitura2_expected_prev[13] !== 1'bx ) && ( DadosLeitura2_prev[13] !== DadosLeitura2_expected_prev[13] )
		&& ((DadosLeitura2_expected_prev[13] !== last_DadosLeitura2_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[13] = DadosLeitura2_expected_prev[13];
	end
	if (
		( DadosLeitura2_expected_prev[14] !== 1'bx ) && ( DadosLeitura2_prev[14] !== DadosLeitura2_expected_prev[14] )
		&& ((DadosLeitura2_expected_prev[14] !== last_DadosLeitura2_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[14] = DadosLeitura2_expected_prev[14];
	end
	if (
		( DadosLeitura2_expected_prev[15] !== 1'bx ) && ( DadosLeitura2_prev[15] !== DadosLeitura2_expected_prev[15] )
		&& ((DadosLeitura2_expected_prev[15] !== last_DadosLeitura2_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[15] = DadosLeitura2_expected_prev[15];
	end
	if (
		( DadosLeitura2_expected_prev[16] !== 1'bx ) && ( DadosLeitura2_prev[16] !== DadosLeitura2_expected_prev[16] )
		&& ((DadosLeitura2_expected_prev[16] !== last_DadosLeitura2_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[16] = DadosLeitura2_expected_prev[16];
	end
	if (
		( DadosLeitura2_expected_prev[17] !== 1'bx ) && ( DadosLeitura2_prev[17] !== DadosLeitura2_expected_prev[17] )
		&& ((DadosLeitura2_expected_prev[17] !== last_DadosLeitura2_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[17] = DadosLeitura2_expected_prev[17];
	end
	if (
		( DadosLeitura2_expected_prev[18] !== 1'bx ) && ( DadosLeitura2_prev[18] !== DadosLeitura2_expected_prev[18] )
		&& ((DadosLeitura2_expected_prev[18] !== last_DadosLeitura2_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[18] = DadosLeitura2_expected_prev[18];
	end
	if (
		( DadosLeitura2_expected_prev[19] !== 1'bx ) && ( DadosLeitura2_prev[19] !== DadosLeitura2_expected_prev[19] )
		&& ((DadosLeitura2_expected_prev[19] !== last_DadosLeitura2_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[19] = DadosLeitura2_expected_prev[19];
	end
	if (
		( DadosLeitura2_expected_prev[20] !== 1'bx ) && ( DadosLeitura2_prev[20] !== DadosLeitura2_expected_prev[20] )
		&& ((DadosLeitura2_expected_prev[20] !== last_DadosLeitura2_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[20] = DadosLeitura2_expected_prev[20];
	end
	if (
		( DadosLeitura2_expected_prev[21] !== 1'bx ) && ( DadosLeitura2_prev[21] !== DadosLeitura2_expected_prev[21] )
		&& ((DadosLeitura2_expected_prev[21] !== last_DadosLeitura2_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[21] = DadosLeitura2_expected_prev[21];
	end
	if (
		( DadosLeitura2_expected_prev[22] !== 1'bx ) && ( DadosLeitura2_prev[22] !== DadosLeitura2_expected_prev[22] )
		&& ((DadosLeitura2_expected_prev[22] !== last_DadosLeitura2_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[22] = DadosLeitura2_expected_prev[22];
	end
	if (
		( DadosLeitura2_expected_prev[23] !== 1'bx ) && ( DadosLeitura2_prev[23] !== DadosLeitura2_expected_prev[23] )
		&& ((DadosLeitura2_expected_prev[23] !== last_DadosLeitura2_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[23] = DadosLeitura2_expected_prev[23];
	end
	if (
		( DadosLeitura2_expected_prev[24] !== 1'bx ) && ( DadosLeitura2_prev[24] !== DadosLeitura2_expected_prev[24] )
		&& ((DadosLeitura2_expected_prev[24] !== last_DadosLeitura2_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[24] = DadosLeitura2_expected_prev[24];
	end
	if (
		( DadosLeitura2_expected_prev[25] !== 1'bx ) && ( DadosLeitura2_prev[25] !== DadosLeitura2_expected_prev[25] )
		&& ((DadosLeitura2_expected_prev[25] !== last_DadosLeitura2_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[25] = DadosLeitura2_expected_prev[25];
	end
	if (
		( DadosLeitura2_expected_prev[26] !== 1'bx ) && ( DadosLeitura2_prev[26] !== DadosLeitura2_expected_prev[26] )
		&& ((DadosLeitura2_expected_prev[26] !== last_DadosLeitura2_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[26] = DadosLeitura2_expected_prev[26];
	end
	if (
		( DadosLeitura2_expected_prev[27] !== 1'bx ) && ( DadosLeitura2_prev[27] !== DadosLeitura2_expected_prev[27] )
		&& ((DadosLeitura2_expected_prev[27] !== last_DadosLeitura2_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[27] = DadosLeitura2_expected_prev[27];
	end
	if (
		( DadosLeitura2_expected_prev[28] !== 1'bx ) && ( DadosLeitura2_prev[28] !== DadosLeitura2_expected_prev[28] )
		&& ((DadosLeitura2_expected_prev[28] !== last_DadosLeitura2_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[28] = DadosLeitura2_expected_prev[28];
	end
	if (
		( DadosLeitura2_expected_prev[29] !== 1'bx ) && ( DadosLeitura2_prev[29] !== DadosLeitura2_expected_prev[29] )
		&& ((DadosLeitura2_expected_prev[29] !== last_DadosLeitura2_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[29] = DadosLeitura2_expected_prev[29];
	end
	if (
		( DadosLeitura2_expected_prev[30] !== 1'bx ) && ( DadosLeitura2_prev[30] !== DadosLeitura2_expected_prev[30] )
		&& ((DadosLeitura2_expected_prev[30] !== last_DadosLeitura2_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[30] = DadosLeitura2_expected_prev[30];
	end
	if (
		( DadosLeitura2_expected_prev[31] !== 1'bx ) && ( DadosLeitura2_prev[31] !== DadosLeitura2_expected_prev[31] )
		&& ((DadosLeitura2_expected_prev[31] !== last_DadosLeitura2_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosLeitura2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosLeitura2_expected_prev);
		$display ("     Real value = %b", DadosLeitura2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DadosLeitura2_exp[31] = DadosLeitura2_expected_prev[31];
	end
	if (
		( DadosMem_expected_prev[0] !== 1'bx ) && ( DadosMem_prev[0] !== DadosMem_expected_prev[0] )
		&& ((DadosMem_expected_prev[0] !== last_DadosMem_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[0] = DadosMem_expected_prev[0];
	end
	if (
		( DadosMem_expected_prev[1] !== 1'bx ) && ( DadosMem_prev[1] !== DadosMem_expected_prev[1] )
		&& ((DadosMem_expected_prev[1] !== last_DadosMem_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[1] = DadosMem_expected_prev[1];
	end
	if (
		( DadosMem_expected_prev[2] !== 1'bx ) && ( DadosMem_prev[2] !== DadosMem_expected_prev[2] )
		&& ((DadosMem_expected_prev[2] !== last_DadosMem_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[2] = DadosMem_expected_prev[2];
	end
	if (
		( DadosMem_expected_prev[3] !== 1'bx ) && ( DadosMem_prev[3] !== DadosMem_expected_prev[3] )
		&& ((DadosMem_expected_prev[3] !== last_DadosMem_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[3] = DadosMem_expected_prev[3];
	end
	if (
		( DadosMem_expected_prev[4] !== 1'bx ) && ( DadosMem_prev[4] !== DadosMem_expected_prev[4] )
		&& ((DadosMem_expected_prev[4] !== last_DadosMem_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[4] = DadosMem_expected_prev[4];
	end
	if (
		( DadosMem_expected_prev[5] !== 1'bx ) && ( DadosMem_prev[5] !== DadosMem_expected_prev[5] )
		&& ((DadosMem_expected_prev[5] !== last_DadosMem_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[5] = DadosMem_expected_prev[5];
	end
	if (
		( DadosMem_expected_prev[6] !== 1'bx ) && ( DadosMem_prev[6] !== DadosMem_expected_prev[6] )
		&& ((DadosMem_expected_prev[6] !== last_DadosMem_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[6] = DadosMem_expected_prev[6];
	end
	if (
		( DadosMem_expected_prev[7] !== 1'bx ) && ( DadosMem_prev[7] !== DadosMem_expected_prev[7] )
		&& ((DadosMem_expected_prev[7] !== last_DadosMem_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[7] = DadosMem_expected_prev[7];
	end
	if (
		( DadosMem_expected_prev[8] !== 1'bx ) && ( DadosMem_prev[8] !== DadosMem_expected_prev[8] )
		&& ((DadosMem_expected_prev[8] !== last_DadosMem_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[8] = DadosMem_expected_prev[8];
	end
	if (
		( DadosMem_expected_prev[9] !== 1'bx ) && ( DadosMem_prev[9] !== DadosMem_expected_prev[9] )
		&& ((DadosMem_expected_prev[9] !== last_DadosMem_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[9] = DadosMem_expected_prev[9];
	end
	if (
		( DadosMem_expected_prev[10] !== 1'bx ) && ( DadosMem_prev[10] !== DadosMem_expected_prev[10] )
		&& ((DadosMem_expected_prev[10] !== last_DadosMem_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[10] = DadosMem_expected_prev[10];
	end
	if (
		( DadosMem_expected_prev[11] !== 1'bx ) && ( DadosMem_prev[11] !== DadosMem_expected_prev[11] )
		&& ((DadosMem_expected_prev[11] !== last_DadosMem_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[11] = DadosMem_expected_prev[11];
	end
	if (
		( DadosMem_expected_prev[12] !== 1'bx ) && ( DadosMem_prev[12] !== DadosMem_expected_prev[12] )
		&& ((DadosMem_expected_prev[12] !== last_DadosMem_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[12] = DadosMem_expected_prev[12];
	end
	if (
		( DadosMem_expected_prev[13] !== 1'bx ) && ( DadosMem_prev[13] !== DadosMem_expected_prev[13] )
		&& ((DadosMem_expected_prev[13] !== last_DadosMem_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[13] = DadosMem_expected_prev[13];
	end
	if (
		( DadosMem_expected_prev[14] !== 1'bx ) && ( DadosMem_prev[14] !== DadosMem_expected_prev[14] )
		&& ((DadosMem_expected_prev[14] !== last_DadosMem_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[14] = DadosMem_expected_prev[14];
	end
	if (
		( DadosMem_expected_prev[15] !== 1'bx ) && ( DadosMem_prev[15] !== DadosMem_expected_prev[15] )
		&& ((DadosMem_expected_prev[15] !== last_DadosMem_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[15] = DadosMem_expected_prev[15];
	end
	if (
		( DadosMem_expected_prev[16] !== 1'bx ) && ( DadosMem_prev[16] !== DadosMem_expected_prev[16] )
		&& ((DadosMem_expected_prev[16] !== last_DadosMem_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[16] = DadosMem_expected_prev[16];
	end
	if (
		( DadosMem_expected_prev[17] !== 1'bx ) && ( DadosMem_prev[17] !== DadosMem_expected_prev[17] )
		&& ((DadosMem_expected_prev[17] !== last_DadosMem_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[17] = DadosMem_expected_prev[17];
	end
	if (
		( DadosMem_expected_prev[18] !== 1'bx ) && ( DadosMem_prev[18] !== DadosMem_expected_prev[18] )
		&& ((DadosMem_expected_prev[18] !== last_DadosMem_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[18] = DadosMem_expected_prev[18];
	end
	if (
		( DadosMem_expected_prev[19] !== 1'bx ) && ( DadosMem_prev[19] !== DadosMem_expected_prev[19] )
		&& ((DadosMem_expected_prev[19] !== last_DadosMem_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[19] = DadosMem_expected_prev[19];
	end
	if (
		( DadosMem_expected_prev[20] !== 1'bx ) && ( DadosMem_prev[20] !== DadosMem_expected_prev[20] )
		&& ((DadosMem_expected_prev[20] !== last_DadosMem_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[20] = DadosMem_expected_prev[20];
	end
	if (
		( DadosMem_expected_prev[21] !== 1'bx ) && ( DadosMem_prev[21] !== DadosMem_expected_prev[21] )
		&& ((DadosMem_expected_prev[21] !== last_DadosMem_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[21] = DadosMem_expected_prev[21];
	end
	if (
		( DadosMem_expected_prev[22] !== 1'bx ) && ( DadosMem_prev[22] !== DadosMem_expected_prev[22] )
		&& ((DadosMem_expected_prev[22] !== last_DadosMem_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[22] = DadosMem_expected_prev[22];
	end
	if (
		( DadosMem_expected_prev[23] !== 1'bx ) && ( DadosMem_prev[23] !== DadosMem_expected_prev[23] )
		&& ((DadosMem_expected_prev[23] !== last_DadosMem_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[23] = DadosMem_expected_prev[23];
	end
	if (
		( DadosMem_expected_prev[24] !== 1'bx ) && ( DadosMem_prev[24] !== DadosMem_expected_prev[24] )
		&& ((DadosMem_expected_prev[24] !== last_DadosMem_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[24] = DadosMem_expected_prev[24];
	end
	if (
		( DadosMem_expected_prev[25] !== 1'bx ) && ( DadosMem_prev[25] !== DadosMem_expected_prev[25] )
		&& ((DadosMem_expected_prev[25] !== last_DadosMem_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[25] = DadosMem_expected_prev[25];
	end
	if (
		( DadosMem_expected_prev[26] !== 1'bx ) && ( DadosMem_prev[26] !== DadosMem_expected_prev[26] )
		&& ((DadosMem_expected_prev[26] !== last_DadosMem_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[26] = DadosMem_expected_prev[26];
	end
	if (
		( DadosMem_expected_prev[27] !== 1'bx ) && ( DadosMem_prev[27] !== DadosMem_expected_prev[27] )
		&& ((DadosMem_expected_prev[27] !== last_DadosMem_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[27] = DadosMem_expected_prev[27];
	end
	if (
		( DadosMem_expected_prev[28] !== 1'bx ) && ( DadosMem_prev[28] !== DadosMem_expected_prev[28] )
		&& ((DadosMem_expected_prev[28] !== last_DadosMem_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[28] = DadosMem_expected_prev[28];
	end
	if (
		( DadosMem_expected_prev[29] !== 1'bx ) && ( DadosMem_prev[29] !== DadosMem_expected_prev[29] )
		&& ((DadosMem_expected_prev[29] !== last_DadosMem_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[29] = DadosMem_expected_prev[29];
	end
	if (
		( DadosMem_expected_prev[30] !== 1'bx ) && ( DadosMem_prev[30] !== DadosMem_expected_prev[30] )
		&& ((DadosMem_expected_prev[30] !== last_DadosMem_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[30] = DadosMem_expected_prev[30];
	end
	if (
		( DadosMem_expected_prev[31] !== 1'bx ) && ( DadosMem_prev[31] !== DadosMem_expected_prev[31] )
		&& ((DadosMem_expected_prev[31] !== last_DadosMem_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DadosMem_exp[31] = DadosMem_expected_prev[31];
	end
	if (
		( EscreveMem_expected_prev !== 1'bx ) && ( EscreveMem_prev !== EscreveMem_expected_prev )
		&& ((EscreveMem_expected_prev !== last_EscreveMem_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscreveMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscreveMem_expected_prev);
		$display ("     Real value = %b", EscreveMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EscreveMem_exp = EscreveMem_expected_prev;
	end
	if (
		( EscreveReg_expected_prev !== 1'bx ) && ( EscreveReg_prev !== EscreveReg_expected_prev )
		&& ((EscreveReg_expected_prev !== last_EscreveReg_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscreveReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscreveReg_expected_prev);
		$display ("     Real value = %b", EscreveReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_EscreveReg_exp = EscreveReg_expected_prev;
	end
	if (
		( Instrucao_expected_prev[0] !== 1'bx ) && ( Instrucao_prev[0] !== Instrucao_expected_prev[0] )
		&& ((Instrucao_expected_prev[0] !== last_Instrucao_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[0] = Instrucao_expected_prev[0];
	end
	if (
		( Instrucao_expected_prev[1] !== 1'bx ) && ( Instrucao_prev[1] !== Instrucao_expected_prev[1] )
		&& ((Instrucao_expected_prev[1] !== last_Instrucao_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[1] = Instrucao_expected_prev[1];
	end
	if (
		( Instrucao_expected_prev[2] !== 1'bx ) && ( Instrucao_prev[2] !== Instrucao_expected_prev[2] )
		&& ((Instrucao_expected_prev[2] !== last_Instrucao_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[2] = Instrucao_expected_prev[2];
	end
	if (
		( Instrucao_expected_prev[3] !== 1'bx ) && ( Instrucao_prev[3] !== Instrucao_expected_prev[3] )
		&& ((Instrucao_expected_prev[3] !== last_Instrucao_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[3] = Instrucao_expected_prev[3];
	end
	if (
		( Instrucao_expected_prev[4] !== 1'bx ) && ( Instrucao_prev[4] !== Instrucao_expected_prev[4] )
		&& ((Instrucao_expected_prev[4] !== last_Instrucao_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[4] = Instrucao_expected_prev[4];
	end
	if (
		( Instrucao_expected_prev[5] !== 1'bx ) && ( Instrucao_prev[5] !== Instrucao_expected_prev[5] )
		&& ((Instrucao_expected_prev[5] !== last_Instrucao_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[5] = Instrucao_expected_prev[5];
	end
	if (
		( Instrucao_expected_prev[6] !== 1'bx ) && ( Instrucao_prev[6] !== Instrucao_expected_prev[6] )
		&& ((Instrucao_expected_prev[6] !== last_Instrucao_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[6] = Instrucao_expected_prev[6];
	end
	if (
		( Instrucao_expected_prev[7] !== 1'bx ) && ( Instrucao_prev[7] !== Instrucao_expected_prev[7] )
		&& ((Instrucao_expected_prev[7] !== last_Instrucao_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[7] = Instrucao_expected_prev[7];
	end
	if (
		( Instrucao_expected_prev[8] !== 1'bx ) && ( Instrucao_prev[8] !== Instrucao_expected_prev[8] )
		&& ((Instrucao_expected_prev[8] !== last_Instrucao_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[8] = Instrucao_expected_prev[8];
	end
	if (
		( Instrucao_expected_prev[9] !== 1'bx ) && ( Instrucao_prev[9] !== Instrucao_expected_prev[9] )
		&& ((Instrucao_expected_prev[9] !== last_Instrucao_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[9] = Instrucao_expected_prev[9];
	end
	if (
		( Instrucao_expected_prev[10] !== 1'bx ) && ( Instrucao_prev[10] !== Instrucao_expected_prev[10] )
		&& ((Instrucao_expected_prev[10] !== last_Instrucao_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[10] = Instrucao_expected_prev[10];
	end
	if (
		( Instrucao_expected_prev[11] !== 1'bx ) && ( Instrucao_prev[11] !== Instrucao_expected_prev[11] )
		&& ((Instrucao_expected_prev[11] !== last_Instrucao_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[11] = Instrucao_expected_prev[11];
	end
	if (
		( Instrucao_expected_prev[12] !== 1'bx ) && ( Instrucao_prev[12] !== Instrucao_expected_prev[12] )
		&& ((Instrucao_expected_prev[12] !== last_Instrucao_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[12] = Instrucao_expected_prev[12];
	end
	if (
		( Instrucao_expected_prev[13] !== 1'bx ) && ( Instrucao_prev[13] !== Instrucao_expected_prev[13] )
		&& ((Instrucao_expected_prev[13] !== last_Instrucao_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[13] = Instrucao_expected_prev[13];
	end
	if (
		( Instrucao_expected_prev[14] !== 1'bx ) && ( Instrucao_prev[14] !== Instrucao_expected_prev[14] )
		&& ((Instrucao_expected_prev[14] !== last_Instrucao_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[14] = Instrucao_expected_prev[14];
	end
	if (
		( Instrucao_expected_prev[15] !== 1'bx ) && ( Instrucao_prev[15] !== Instrucao_expected_prev[15] )
		&& ((Instrucao_expected_prev[15] !== last_Instrucao_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[15] = Instrucao_expected_prev[15];
	end
	if (
		( Instrucao_expected_prev[16] !== 1'bx ) && ( Instrucao_prev[16] !== Instrucao_expected_prev[16] )
		&& ((Instrucao_expected_prev[16] !== last_Instrucao_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[16] = Instrucao_expected_prev[16];
	end
	if (
		( Instrucao_expected_prev[17] !== 1'bx ) && ( Instrucao_prev[17] !== Instrucao_expected_prev[17] )
		&& ((Instrucao_expected_prev[17] !== last_Instrucao_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[17] = Instrucao_expected_prev[17];
	end
	if (
		( Instrucao_expected_prev[18] !== 1'bx ) && ( Instrucao_prev[18] !== Instrucao_expected_prev[18] )
		&& ((Instrucao_expected_prev[18] !== last_Instrucao_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[18] = Instrucao_expected_prev[18];
	end
	if (
		( Instrucao_expected_prev[19] !== 1'bx ) && ( Instrucao_prev[19] !== Instrucao_expected_prev[19] )
		&& ((Instrucao_expected_prev[19] !== last_Instrucao_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[19] = Instrucao_expected_prev[19];
	end
	if (
		( Instrucao_expected_prev[20] !== 1'bx ) && ( Instrucao_prev[20] !== Instrucao_expected_prev[20] )
		&& ((Instrucao_expected_prev[20] !== last_Instrucao_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[20] = Instrucao_expected_prev[20];
	end
	if (
		( Instrucao_expected_prev[21] !== 1'bx ) && ( Instrucao_prev[21] !== Instrucao_expected_prev[21] )
		&& ((Instrucao_expected_prev[21] !== last_Instrucao_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[21] = Instrucao_expected_prev[21];
	end
	if (
		( Instrucao_expected_prev[22] !== 1'bx ) && ( Instrucao_prev[22] !== Instrucao_expected_prev[22] )
		&& ((Instrucao_expected_prev[22] !== last_Instrucao_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[22] = Instrucao_expected_prev[22];
	end
	if (
		( Instrucao_expected_prev[23] !== 1'bx ) && ( Instrucao_prev[23] !== Instrucao_expected_prev[23] )
		&& ((Instrucao_expected_prev[23] !== last_Instrucao_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[23] = Instrucao_expected_prev[23];
	end
	if (
		( Instrucao_expected_prev[24] !== 1'bx ) && ( Instrucao_prev[24] !== Instrucao_expected_prev[24] )
		&& ((Instrucao_expected_prev[24] !== last_Instrucao_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[24] = Instrucao_expected_prev[24];
	end
	if (
		( Instrucao_expected_prev[25] !== 1'bx ) && ( Instrucao_prev[25] !== Instrucao_expected_prev[25] )
		&& ((Instrucao_expected_prev[25] !== last_Instrucao_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[25] = Instrucao_expected_prev[25];
	end
	if (
		( Instrucao_expected_prev[26] !== 1'bx ) && ( Instrucao_prev[26] !== Instrucao_expected_prev[26] )
		&& ((Instrucao_expected_prev[26] !== last_Instrucao_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[26] = Instrucao_expected_prev[26];
	end
	if (
		( Instrucao_expected_prev[27] !== 1'bx ) && ( Instrucao_prev[27] !== Instrucao_expected_prev[27] )
		&& ((Instrucao_expected_prev[27] !== last_Instrucao_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[27] = Instrucao_expected_prev[27];
	end
	if (
		( Instrucao_expected_prev[28] !== 1'bx ) && ( Instrucao_prev[28] !== Instrucao_expected_prev[28] )
		&& ((Instrucao_expected_prev[28] !== last_Instrucao_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[28] = Instrucao_expected_prev[28];
	end
	if (
		( Instrucao_expected_prev[29] !== 1'bx ) && ( Instrucao_prev[29] !== Instrucao_expected_prev[29] )
		&& ((Instrucao_expected_prev[29] !== last_Instrucao_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[29] = Instrucao_expected_prev[29];
	end
	if (
		( Instrucao_expected_prev[30] !== 1'bx ) && ( Instrucao_prev[30] !== Instrucao_expected_prev[30] )
		&& ((Instrucao_expected_prev[30] !== last_Instrucao_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[30] = Instrucao_expected_prev[30];
	end
	if (
		( Instrucao_expected_prev[31] !== 1'bx ) && ( Instrucao_prev[31] !== Instrucao_expected_prev[31] )
		&& ((Instrucao_expected_prev[31] !== last_Instrucao_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instrucao_expected_prev);
		$display ("     Real value = %b", Instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Instrucao_exp[31] = Instrucao_expected_prev[31];
	end
	if (
		( LeMem_expected_prev !== 1'bx ) && ( LeMem_prev !== LeMem_expected_prev )
		&& ((LeMem_expected_prev !== last_LeMem_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LeMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LeMem_expected_prev);
		$display ("     Real value = %b", LeMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LeMem_exp = LeMem_expected_prev;
	end
	if (
		( MemParaReg_expected_prev !== 1'bx ) && ( MemParaReg_prev !== MemParaReg_expected_prev )
		&& ((MemParaReg_expected_prev !== last_MemParaReg_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemParaReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemParaReg_expected_prev);
		$display ("     Real value = %b", MemParaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_MemParaReg_exp = MemParaReg_expected_prev;
	end
	if (
		( Op0_expected_prev !== 1'bx ) && ( Op0_prev !== Op0_expected_prev )
		&& ((Op0_expected_prev !== last_Op0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op0_expected_prev);
		$display ("     Real value = %b", Op0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Op0_exp = Op0_expected_prev;
	end
	if (
		( Op1_expected_prev !== 1'bx ) && ( Op1_prev !== Op1_expected_prev )
		&& ((Op1_expected_prev !== last_Op1_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op1_expected_prev);
		$display ("     Real value = %b", Op1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Op1_exp = Op1_expected_prev;
	end
	if (
		( OpAlu0_expected_prev !== 1'bx ) && ( OpAlu0_prev !== OpAlu0_expected_prev )
		&& ((OpAlu0_expected_prev !== last_OpAlu0_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpAlu0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpAlu0_expected_prev);
		$display ("     Real value = %b", OpAlu0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_OpAlu0_exp = OpAlu0_expected_prev;
	end
	if (
		( OpALU1_expected_prev !== 1'bx ) && ( OpALU1_prev !== OpALU1_expected_prev )
		&& ((OpALU1_expected_prev !== last_OpALU1_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpALU1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpALU1_expected_prev);
		$display ("     Real value = %b", OpALU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_OpALU1_exp = OpALU1_expected_prev;
	end
	if (
		( OrigALU_expected_prev !== 1'bx ) && ( OrigALU_prev !== OrigALU_expected_prev )
		&& ((OrigALU_expected_prev !== last_OrigALU_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OrigALU :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OrigALU_expected_prev);
		$display ("     Real value = %b", OrigALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_OrigALU_exp = OrigALU_expected_prev;
	end
	if (
		( RegDst_expected_prev !== 1'bx ) && ( RegDst_prev !== RegDst_expected_prev )
		&& ((RegDst_expected_prev !== last_RegDst_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RegDst_exp = RegDst_expected_prev;
	end
	if (
		( SaidaULA_expected_prev[0] !== 1'bx ) && ( SaidaULA_prev[0] !== SaidaULA_expected_prev[0] )
		&& ((SaidaULA_expected_prev[0] !== last_SaidaULA_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[0] = SaidaULA_expected_prev[0];
	end
	if (
		( SaidaULA_expected_prev[1] !== 1'bx ) && ( SaidaULA_prev[1] !== SaidaULA_expected_prev[1] )
		&& ((SaidaULA_expected_prev[1] !== last_SaidaULA_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[1] = SaidaULA_expected_prev[1];
	end
	if (
		( SaidaULA_expected_prev[2] !== 1'bx ) && ( SaidaULA_prev[2] !== SaidaULA_expected_prev[2] )
		&& ((SaidaULA_expected_prev[2] !== last_SaidaULA_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[2] = SaidaULA_expected_prev[2];
	end
	if (
		( SaidaULA_expected_prev[3] !== 1'bx ) && ( SaidaULA_prev[3] !== SaidaULA_expected_prev[3] )
		&& ((SaidaULA_expected_prev[3] !== last_SaidaULA_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[3] = SaidaULA_expected_prev[3];
	end
	if (
		( SaidaULA_expected_prev[4] !== 1'bx ) && ( SaidaULA_prev[4] !== SaidaULA_expected_prev[4] )
		&& ((SaidaULA_expected_prev[4] !== last_SaidaULA_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[4] = SaidaULA_expected_prev[4];
	end
	if (
		( SaidaULA_expected_prev[5] !== 1'bx ) && ( SaidaULA_prev[5] !== SaidaULA_expected_prev[5] )
		&& ((SaidaULA_expected_prev[5] !== last_SaidaULA_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[5] = SaidaULA_expected_prev[5];
	end
	if (
		( SaidaULA_expected_prev[6] !== 1'bx ) && ( SaidaULA_prev[6] !== SaidaULA_expected_prev[6] )
		&& ((SaidaULA_expected_prev[6] !== last_SaidaULA_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[6] = SaidaULA_expected_prev[6];
	end
	if (
		( SaidaULA_expected_prev[7] !== 1'bx ) && ( SaidaULA_prev[7] !== SaidaULA_expected_prev[7] )
		&& ((SaidaULA_expected_prev[7] !== last_SaidaULA_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[7] = SaidaULA_expected_prev[7];
	end
	if (
		( SaidaULA_expected_prev[8] !== 1'bx ) && ( SaidaULA_prev[8] !== SaidaULA_expected_prev[8] )
		&& ((SaidaULA_expected_prev[8] !== last_SaidaULA_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[8] = SaidaULA_expected_prev[8];
	end
	if (
		( SaidaULA_expected_prev[9] !== 1'bx ) && ( SaidaULA_prev[9] !== SaidaULA_expected_prev[9] )
		&& ((SaidaULA_expected_prev[9] !== last_SaidaULA_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[9] = SaidaULA_expected_prev[9];
	end
	if (
		( SaidaULA_expected_prev[10] !== 1'bx ) && ( SaidaULA_prev[10] !== SaidaULA_expected_prev[10] )
		&& ((SaidaULA_expected_prev[10] !== last_SaidaULA_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[10] = SaidaULA_expected_prev[10];
	end
	if (
		( SaidaULA_expected_prev[11] !== 1'bx ) && ( SaidaULA_prev[11] !== SaidaULA_expected_prev[11] )
		&& ((SaidaULA_expected_prev[11] !== last_SaidaULA_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[11] = SaidaULA_expected_prev[11];
	end
	if (
		( SaidaULA_expected_prev[12] !== 1'bx ) && ( SaidaULA_prev[12] !== SaidaULA_expected_prev[12] )
		&& ((SaidaULA_expected_prev[12] !== last_SaidaULA_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[12] = SaidaULA_expected_prev[12];
	end
	if (
		( SaidaULA_expected_prev[13] !== 1'bx ) && ( SaidaULA_prev[13] !== SaidaULA_expected_prev[13] )
		&& ((SaidaULA_expected_prev[13] !== last_SaidaULA_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[13] = SaidaULA_expected_prev[13];
	end
	if (
		( SaidaULA_expected_prev[14] !== 1'bx ) && ( SaidaULA_prev[14] !== SaidaULA_expected_prev[14] )
		&& ((SaidaULA_expected_prev[14] !== last_SaidaULA_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[14] = SaidaULA_expected_prev[14];
	end
	if (
		( SaidaULA_expected_prev[15] !== 1'bx ) && ( SaidaULA_prev[15] !== SaidaULA_expected_prev[15] )
		&& ((SaidaULA_expected_prev[15] !== last_SaidaULA_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[15] = SaidaULA_expected_prev[15];
	end
	if (
		( SaidaULA_expected_prev[16] !== 1'bx ) && ( SaidaULA_prev[16] !== SaidaULA_expected_prev[16] )
		&& ((SaidaULA_expected_prev[16] !== last_SaidaULA_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[16] = SaidaULA_expected_prev[16];
	end
	if (
		( SaidaULA_expected_prev[17] !== 1'bx ) && ( SaidaULA_prev[17] !== SaidaULA_expected_prev[17] )
		&& ((SaidaULA_expected_prev[17] !== last_SaidaULA_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[17] = SaidaULA_expected_prev[17];
	end
	if (
		( SaidaULA_expected_prev[18] !== 1'bx ) && ( SaidaULA_prev[18] !== SaidaULA_expected_prev[18] )
		&& ((SaidaULA_expected_prev[18] !== last_SaidaULA_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[18] = SaidaULA_expected_prev[18];
	end
	if (
		( SaidaULA_expected_prev[19] !== 1'bx ) && ( SaidaULA_prev[19] !== SaidaULA_expected_prev[19] )
		&& ((SaidaULA_expected_prev[19] !== last_SaidaULA_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[19] = SaidaULA_expected_prev[19];
	end
	if (
		( SaidaULA_expected_prev[20] !== 1'bx ) && ( SaidaULA_prev[20] !== SaidaULA_expected_prev[20] )
		&& ((SaidaULA_expected_prev[20] !== last_SaidaULA_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[20] = SaidaULA_expected_prev[20];
	end
	if (
		( SaidaULA_expected_prev[21] !== 1'bx ) && ( SaidaULA_prev[21] !== SaidaULA_expected_prev[21] )
		&& ((SaidaULA_expected_prev[21] !== last_SaidaULA_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[21] = SaidaULA_expected_prev[21];
	end
	if (
		( SaidaULA_expected_prev[22] !== 1'bx ) && ( SaidaULA_prev[22] !== SaidaULA_expected_prev[22] )
		&& ((SaidaULA_expected_prev[22] !== last_SaidaULA_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[22] = SaidaULA_expected_prev[22];
	end
	if (
		( SaidaULA_expected_prev[23] !== 1'bx ) && ( SaidaULA_prev[23] !== SaidaULA_expected_prev[23] )
		&& ((SaidaULA_expected_prev[23] !== last_SaidaULA_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[23] = SaidaULA_expected_prev[23];
	end
	if (
		( SaidaULA_expected_prev[24] !== 1'bx ) && ( SaidaULA_prev[24] !== SaidaULA_expected_prev[24] )
		&& ((SaidaULA_expected_prev[24] !== last_SaidaULA_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[24] = SaidaULA_expected_prev[24];
	end
	if (
		( SaidaULA_expected_prev[25] !== 1'bx ) && ( SaidaULA_prev[25] !== SaidaULA_expected_prev[25] )
		&& ((SaidaULA_expected_prev[25] !== last_SaidaULA_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[25] = SaidaULA_expected_prev[25];
	end
	if (
		( SaidaULA_expected_prev[26] !== 1'bx ) && ( SaidaULA_prev[26] !== SaidaULA_expected_prev[26] )
		&& ((SaidaULA_expected_prev[26] !== last_SaidaULA_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[26] = SaidaULA_expected_prev[26];
	end
	if (
		( SaidaULA_expected_prev[27] !== 1'bx ) && ( SaidaULA_prev[27] !== SaidaULA_expected_prev[27] )
		&& ((SaidaULA_expected_prev[27] !== last_SaidaULA_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[27] = SaidaULA_expected_prev[27];
	end
	if (
		( SaidaULA_expected_prev[28] !== 1'bx ) && ( SaidaULA_prev[28] !== SaidaULA_expected_prev[28] )
		&& ((SaidaULA_expected_prev[28] !== last_SaidaULA_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[28] = SaidaULA_expected_prev[28];
	end
	if (
		( SaidaULA_expected_prev[29] !== 1'bx ) && ( SaidaULA_prev[29] !== SaidaULA_expected_prev[29] )
		&& ((SaidaULA_expected_prev[29] !== last_SaidaULA_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[29] = SaidaULA_expected_prev[29];
	end
	if (
		( SaidaULA_expected_prev[30] !== 1'bx ) && ( SaidaULA_prev[30] !== SaidaULA_expected_prev[30] )
		&& ((SaidaULA_expected_prev[30] !== last_SaidaULA_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[30] = SaidaULA_expected_prev[30];
	end
	if (
		( SaidaULA_expected_prev[31] !== 1'bx ) && ( SaidaULA_prev[31] !== SaidaULA_expected_prev[31] )
		&& ((SaidaULA_expected_prev[31] !== last_SaidaULA_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_SaidaULA_exp[31] = SaidaULA_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module OAC_Lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk2;
reg [31:0] Endereco;
// wires                                               
wire AInverte;
wire BInverte;
wire Branch;
wire [31:0] DadosLeitura1;
wire [31:0] DadosLeitura2;
wire [31:0] DadosMem;
wire EscreveMem;
wire EscreveReg;
wire [31:0] Instrucao;
wire LeMem;
wire MemParaReg;
wire Op0;
wire Op1;
wire OpAlu0;
wire OpALU1;
wire OrigALU;
wire RegDst;
wire [31:0] SaidaULA;

wire sampler;                             

// assign statements (if any)                          
OAC_Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.AInverte(AInverte),
	.BInverte(BInverte),
	.Branch(Branch),
	.clk(clk),
	.clk2(clk2),
	.DadosLeitura1(DadosLeitura1),
	.DadosLeitura2(DadosLeitura2),
	.DadosMem(DadosMem),
	.Endereco(Endereco),
	.EscreveMem(EscreveMem),
	.EscreveReg(EscreveReg),
	.Instrucao(Instrucao),
	.LeMem(LeMem),
	.MemParaReg(MemParaReg),
	.Op0(Op0),
	.Op1(Op1),
	.OpAlu0(OpAlu0),
	.OpALU1(OpALU1),
	.OrigALU(OrigALU),
	.RegDst(RegDst),
	.SaidaULA(SaidaULA)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// clk2
always
begin
	clk2 = 1'b0;
	clk2 = #500 1'b1;
	#500;
end 
// Endereco[ 31 ]
initial
begin
	Endereco[31] = 1'b0;
end 
// Endereco[ 30 ]
initial
begin
	Endereco[30] = 1'b0;
end 
// Endereco[ 29 ]
initial
begin
	Endereco[29] = 1'b0;
end 
// Endereco[ 28 ]
initial
begin
	Endereco[28] = 1'b0;
end 
// Endereco[ 27 ]
initial
begin
	Endereco[27] = 1'b0;
end 
// Endereco[ 26 ]
initial
begin
	Endereco[26] = 1'b0;
end 
// Endereco[ 25 ]
initial
begin
	Endereco[25] = 1'b0;
end 
// Endereco[ 24 ]
initial
begin
	Endereco[24] = 1'b0;
end 
// Endereco[ 23 ]
initial
begin
	Endereco[23] = 1'b0;
end 
// Endereco[ 22 ]
initial
begin
	Endereco[22] = 1'b0;
end 
// Endereco[ 21 ]
initial
begin
	Endereco[21] = 1'b0;
end 
// Endereco[ 20 ]
initial
begin
	Endereco[20] = 1'b0;
end 
// Endereco[ 19 ]
initial
begin
	Endereco[19] = 1'b0;
end 
// Endereco[ 18 ]
initial
begin
	Endereco[18] = 1'b0;
end 
// Endereco[ 17 ]
initial
begin
	Endereco[17] = 1'b0;
end 
// Endereco[ 16 ]
initial
begin
	Endereco[16] = 1'b0;
end 
// Endereco[ 15 ]
initial
begin
	Endereco[15] = 1'b0;
end 
// Endereco[ 14 ]
initial
begin
	Endereco[14] = 1'b0;
end 
// Endereco[ 13 ]
initial
begin
	Endereco[13] = 1'b0;
end 
// Endereco[ 12 ]
initial
begin
	Endereco[12] = 1'b0;
end 
// Endereco[ 11 ]
initial
begin
	Endereco[11] = 1'b0;
end 
// Endereco[ 10 ]
initial
begin
	Endereco[10] = 1'b0;
end 
// Endereco[ 9 ]
initial
begin
	Endereco[9] = 1'b0;
end 
// Endereco[ 8 ]
initial
begin
	Endereco[8] = 1'b0;
end 
// Endereco[ 7 ]
initial
begin
	Endereco[7] = 1'b0;
end 
// Endereco[ 6 ]
initial
begin
	Endereco[6] = 1'b0;
	Endereco[6] = #640000 1'b1;
end 
// Endereco[ 5 ]
initial
begin
	Endereco[5] = 1'b0;
	Endereco[5] = #320000 1'b1;
	Endereco[5] = #320000 1'b0;
	Endereco[5] = #320000 1'b1;
end 
// Endereco[ 4 ]
initial
begin
	repeat(3)
	begin
		Endereco[4] = 1'b0;
		Endereco[4] = #160000 1'b1;
		# 160000;
	end
	Endereco[4] = 1'b0;
end 
// Endereco[ 3 ]
initial
begin
	repeat(6)
	begin
		Endereco[3] = 1'b0;
		Endereco[3] = #80000 1'b1;
		# 80000;
	end
	Endereco[3] = 1'b0;
end 
// Endereco[ 2 ]
initial
begin
	repeat(12)
	begin
		Endereco[2] = 1'b0;
		Endereco[2] = #40000 1'b1;
		# 40000;
	end
	Endereco[2] = 1'b0;
end 
// Endereco[ 1 ]
always
begin
	Endereco[1] = 1'b0;
	Endereco[1] = #20000 1'b1;
	#20000;
end 
// Endereco[ 0 ]
always
begin
	Endereco[0] = 1'b0;
	Endereco[0] = #10000 1'b1;
	#10000;
end 

OAC_Lab2_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk2(clk2),
	.Endereco(Endereco),
	.sampler_tx(sampler)
);

OAC_Lab2_vlg_check_tst tb_out(
	.AInverte(AInverte),
	.BInverte(BInverte),
	.Branch(Branch),
	.DadosLeitura1(DadosLeitura1),
	.DadosLeitura2(DadosLeitura2),
	.DadosMem(DadosMem),
	.EscreveMem(EscreveMem),
	.EscreveReg(EscreveReg),
	.Instrucao(Instrucao),
	.LeMem(LeMem),
	.MemParaReg(MemParaReg),
	.Op0(Op0),
	.Op1(Op1),
	.OpAlu0(OpAlu0),
	.OpALU1(OpALU1),
	.OrigALU(OrigALU),
	.RegDst(RegDst),
	.SaidaULA(SaidaULA),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2022 19:03:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    OAC_Lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module OAC_Lab2_vlg_sample_tst(
	clk,
	clk2,
	Endereco,
	sampler_tx
);
input  clk;
input  clk2;
input [7:0] Endereco;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk2 or Endereco)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module OAC_Lab2_vlg_check_tst (
	ALUControl,
	DadosMem,
	PC,
	SaidaULA,
	sampler_rx
);
input [3:0] ALUControl;
input [31:0] DadosMem;
input [31:0] PC;
input [31:0] SaidaULA;
input sampler_rx;

reg [3:0] ALUControl_expected;
reg [31:0] DadosMem_expected;
reg [31:0] PC_expected;
reg [31:0] SaidaULA_expected;

reg [3:0] ALUControl_prev;
reg [31:0] DadosMem_prev;
reg [31:0] PC_prev;
reg [31:0] SaidaULA_prev;

reg [3:0] ALUControl_expected_prev;
reg [31:0] DadosMem_expected_prev;
reg [31:0] PC_expected_prev;
reg [31:0] SaidaULA_expected_prev;

reg [3:0] last_ALUControl_exp;
reg [31:0] last_DadosMem_exp;
reg [31:0] last_PC_exp;
reg [31:0] last_SaidaULA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUControl_prev = ALUControl;
	DadosMem_prev = DadosMem;
	PC_prev = PC;
	SaidaULA_prev = SaidaULA;
end

// update expected /o prevs

always @(trigger)
begin
	ALUControl_expected_prev = ALUControl_expected;
	DadosMem_expected_prev = DadosMem_expected;
	PC_expected_prev = PC_expected;
	SaidaULA_expected_prev = SaidaULA_expected;
end


// expected DadosMem[ 31 ]
initial
begin
	DadosMem_expected[31] = 1'bX;
end 
// expected DadosMem[ 30 ]
initial
begin
	DadosMem_expected[30] = 1'bX;
end 
// expected DadosMem[ 29 ]
initial
begin
	DadosMem_expected[29] = 1'bX;
end 
// expected DadosMem[ 28 ]
initial
begin
	DadosMem_expected[28] = 1'bX;
end 
// expected DadosMem[ 27 ]
initial
begin
	DadosMem_expected[27] = 1'bX;
end 
// expected DadosMem[ 26 ]
initial
begin
	DadosMem_expected[26] = 1'bX;
end 
// expected DadosMem[ 25 ]
initial
begin
	DadosMem_expected[25] = 1'bX;
end 
// expected DadosMem[ 24 ]
initial
begin
	DadosMem_expected[24] = 1'bX;
end 
// expected DadosMem[ 23 ]
initial
begin
	DadosMem_expected[23] = 1'bX;
end 
// expected DadosMem[ 22 ]
initial
begin
	DadosMem_expected[22] = 1'bX;
end 
// expected DadosMem[ 21 ]
initial
begin
	DadosMem_expected[21] = 1'bX;
end 
// expected DadosMem[ 20 ]
initial
begin
	DadosMem_expected[20] = 1'bX;
end 
// expected DadosMem[ 19 ]
initial
begin
	DadosMem_expected[19] = 1'bX;
end 
// expected DadosMem[ 18 ]
initial
begin
	DadosMem_expected[18] = 1'bX;
end 
// expected DadosMem[ 17 ]
initial
begin
	DadosMem_expected[17] = 1'bX;
end 
// expected DadosMem[ 16 ]
initial
begin
	DadosMem_expected[16] = 1'bX;
end 
// expected DadosMem[ 15 ]
initial
begin
	DadosMem_expected[15] = 1'bX;
end 
// expected DadosMem[ 14 ]
initial
begin
	DadosMem_expected[14] = 1'bX;
end 
// expected DadosMem[ 13 ]
initial
begin
	DadosMem_expected[13] = 1'bX;
end 
// expected DadosMem[ 12 ]
initial
begin
	DadosMem_expected[12] = 1'bX;
end 
// expected DadosMem[ 11 ]
initial
begin
	DadosMem_expected[11] = 1'bX;
end 
// expected DadosMem[ 10 ]
initial
begin
	DadosMem_expected[10] = 1'bX;
end 
// expected DadosMem[ 9 ]
initial
begin
	DadosMem_expected[9] = 1'bX;
end 
// expected DadosMem[ 8 ]
initial
begin
	DadosMem_expected[8] = 1'bX;
end 
// expected DadosMem[ 7 ]
initial
begin
	DadosMem_expected[7] = 1'bX;
end 
// expected DadosMem[ 6 ]
initial
begin
	DadosMem_expected[6] = 1'bX;
end 
// expected DadosMem[ 5 ]
initial
begin
	DadosMem_expected[5] = 1'bX;
end 
// expected DadosMem[ 4 ]
initial
begin
	DadosMem_expected[4] = 1'bX;
end 
// expected DadosMem[ 3 ]
initial
begin
	DadosMem_expected[3] = 1'bX;
end 
// expected DadosMem[ 2 ]
initial
begin
	DadosMem_expected[2] = 1'bX;
end 
// expected DadosMem[ 1 ]
initial
begin
	DadosMem_expected[1] = 1'bX;
end 
// expected DadosMem[ 0 ]
initial
begin
	DadosMem_expected[0] = 1'bX;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected SaidaULA[ 31 ]
initial
begin
	SaidaULA_expected[31] = 1'bX;
end 
// expected SaidaULA[ 30 ]
initial
begin
	SaidaULA_expected[30] = 1'bX;
end 
// expected SaidaULA[ 29 ]
initial
begin
	SaidaULA_expected[29] = 1'bX;
end 
// expected SaidaULA[ 28 ]
initial
begin
	SaidaULA_expected[28] = 1'bX;
end 
// expected SaidaULA[ 27 ]
initial
begin
	SaidaULA_expected[27] = 1'bX;
end 
// expected SaidaULA[ 26 ]
initial
begin
	SaidaULA_expected[26] = 1'bX;
end 
// expected SaidaULA[ 25 ]
initial
begin
	SaidaULA_expected[25] = 1'bX;
end 
// expected SaidaULA[ 24 ]
initial
begin
	SaidaULA_expected[24] = 1'bX;
end 
// expected SaidaULA[ 23 ]
initial
begin
	SaidaULA_expected[23] = 1'bX;
end 
// expected SaidaULA[ 22 ]
initial
begin
	SaidaULA_expected[22] = 1'bX;
end 
// expected SaidaULA[ 21 ]
initial
begin
	SaidaULA_expected[21] = 1'bX;
end 
// expected SaidaULA[ 20 ]
initial
begin
	SaidaULA_expected[20] = 1'bX;
end 
// expected SaidaULA[ 19 ]
initial
begin
	SaidaULA_expected[19] = 1'bX;
end 
// expected SaidaULA[ 18 ]
initial
begin
	SaidaULA_expected[18] = 1'bX;
end 
// expected SaidaULA[ 17 ]
initial
begin
	SaidaULA_expected[17] = 1'bX;
end 
// expected SaidaULA[ 16 ]
initial
begin
	SaidaULA_expected[16] = 1'bX;
end 
// expected SaidaULA[ 15 ]
initial
begin
	SaidaULA_expected[15] = 1'bX;
end 
// expected SaidaULA[ 14 ]
initial
begin
	SaidaULA_expected[14] = 1'bX;
end 
// expected SaidaULA[ 13 ]
initial
begin
	SaidaULA_expected[13] = 1'bX;
end 
// expected SaidaULA[ 12 ]
initial
begin
	SaidaULA_expected[12] = 1'bX;
end 
// expected SaidaULA[ 11 ]
initial
begin
	SaidaULA_expected[11] = 1'bX;
end 
// expected SaidaULA[ 10 ]
initial
begin
	SaidaULA_expected[10] = 1'bX;
end 
// expected SaidaULA[ 9 ]
initial
begin
	SaidaULA_expected[9] = 1'bX;
end 
// expected SaidaULA[ 8 ]
initial
begin
	SaidaULA_expected[8] = 1'bX;
end 
// expected SaidaULA[ 7 ]
initial
begin
	SaidaULA_expected[7] = 1'bX;
end 
// expected SaidaULA[ 6 ]
initial
begin
	SaidaULA_expected[6] = 1'bX;
end 
// expected SaidaULA[ 5 ]
initial
begin
	SaidaULA_expected[5] = 1'bX;
end 
// expected SaidaULA[ 4 ]
initial
begin
	SaidaULA_expected[4] = 1'bX;
end 
// expected SaidaULA[ 3 ]
initial
begin
	SaidaULA_expected[3] = 1'bX;
end 
// expected SaidaULA[ 2 ]
initial
begin
	SaidaULA_expected[2] = 1'bX;
end 
// expected SaidaULA[ 1 ]
initial
begin
	SaidaULA_expected[1] = 1'bX;
end 
// expected SaidaULA[ 0 ]
initial
begin
	SaidaULA_expected[0] = 1'bX;
end 
// expected ALUControl[ 3 ]
initial
begin
	ALUControl_expected[3] = 1'bX;
end 
// expected ALUControl[ 2 ]
initial
begin
	ALUControl_expected[2] = 1'bX;
end 
// expected ALUControl[ 1 ]
initial
begin
	ALUControl_expected[1] = 1'bX;
end 
// expected ALUControl[ 0 ]
initial
begin
	ALUControl_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUControl_expected or ALUControl or DadosMem_expected or DadosMem or PC_expected or PC or SaidaULA_expected or SaidaULA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUControl = %b | expected DadosMem = %b | expected PC = %b | expected SaidaULA = %b | ",ALUControl_expected_prev,DadosMem_expected_prev,PC_expected_prev,SaidaULA_expected_prev);
	$display("| real ALUControl = %b | real DadosMem = %b | real PC = %b | real SaidaULA = %b | ",ALUControl_prev,DadosMem_prev,PC_prev,SaidaULA_prev);
`endif
	if (
		( ALUControl_expected_prev[0] !== 1'bx ) && ( ALUControl_prev[0] !== ALUControl_expected_prev[0] )
		&& ((ALUControl_expected_prev[0] !== last_ALUControl_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[0] = ALUControl_expected_prev[0];
	end
	if (
		( ALUControl_expected_prev[1] !== 1'bx ) && ( ALUControl_prev[1] !== ALUControl_expected_prev[1] )
		&& ((ALUControl_expected_prev[1] !== last_ALUControl_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[1] = ALUControl_expected_prev[1];
	end
	if (
		( ALUControl_expected_prev[2] !== 1'bx ) && ( ALUControl_prev[2] !== ALUControl_expected_prev[2] )
		&& ((ALUControl_expected_prev[2] !== last_ALUControl_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[2] = ALUControl_expected_prev[2];
	end
	if (
		( ALUControl_expected_prev[3] !== 1'bx ) && ( ALUControl_prev[3] !== ALUControl_expected_prev[3] )
		&& ((ALUControl_expected_prev[3] !== last_ALUControl_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUControl[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUControl_expected_prev);
		$display ("     Real value = %b", ALUControl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUControl_exp[3] = ALUControl_expected_prev[3];
	end
	if (
		( DadosMem_expected_prev[0] !== 1'bx ) && ( DadosMem_prev[0] !== DadosMem_expected_prev[0] )
		&& ((DadosMem_expected_prev[0] !== last_DadosMem_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[0] = DadosMem_expected_prev[0];
	end
	if (
		( DadosMem_expected_prev[1] !== 1'bx ) && ( DadosMem_prev[1] !== DadosMem_expected_prev[1] )
		&& ((DadosMem_expected_prev[1] !== last_DadosMem_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[1] = DadosMem_expected_prev[1];
	end
	if (
		( DadosMem_expected_prev[2] !== 1'bx ) && ( DadosMem_prev[2] !== DadosMem_expected_prev[2] )
		&& ((DadosMem_expected_prev[2] !== last_DadosMem_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[2] = DadosMem_expected_prev[2];
	end
	if (
		( DadosMem_expected_prev[3] !== 1'bx ) && ( DadosMem_prev[3] !== DadosMem_expected_prev[3] )
		&& ((DadosMem_expected_prev[3] !== last_DadosMem_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[3] = DadosMem_expected_prev[3];
	end
	if (
		( DadosMem_expected_prev[4] !== 1'bx ) && ( DadosMem_prev[4] !== DadosMem_expected_prev[4] )
		&& ((DadosMem_expected_prev[4] !== last_DadosMem_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[4] = DadosMem_expected_prev[4];
	end
	if (
		( DadosMem_expected_prev[5] !== 1'bx ) && ( DadosMem_prev[5] !== DadosMem_expected_prev[5] )
		&& ((DadosMem_expected_prev[5] !== last_DadosMem_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[5] = DadosMem_expected_prev[5];
	end
	if (
		( DadosMem_expected_prev[6] !== 1'bx ) && ( DadosMem_prev[6] !== DadosMem_expected_prev[6] )
		&& ((DadosMem_expected_prev[6] !== last_DadosMem_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[6] = DadosMem_expected_prev[6];
	end
	if (
		( DadosMem_expected_prev[7] !== 1'bx ) && ( DadosMem_prev[7] !== DadosMem_expected_prev[7] )
		&& ((DadosMem_expected_prev[7] !== last_DadosMem_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[7] = DadosMem_expected_prev[7];
	end
	if (
		( DadosMem_expected_prev[8] !== 1'bx ) && ( DadosMem_prev[8] !== DadosMem_expected_prev[8] )
		&& ((DadosMem_expected_prev[8] !== last_DadosMem_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[8] = DadosMem_expected_prev[8];
	end
	if (
		( DadosMem_expected_prev[9] !== 1'bx ) && ( DadosMem_prev[9] !== DadosMem_expected_prev[9] )
		&& ((DadosMem_expected_prev[9] !== last_DadosMem_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[9] = DadosMem_expected_prev[9];
	end
	if (
		( DadosMem_expected_prev[10] !== 1'bx ) && ( DadosMem_prev[10] !== DadosMem_expected_prev[10] )
		&& ((DadosMem_expected_prev[10] !== last_DadosMem_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[10] = DadosMem_expected_prev[10];
	end
	if (
		( DadosMem_expected_prev[11] !== 1'bx ) && ( DadosMem_prev[11] !== DadosMem_expected_prev[11] )
		&& ((DadosMem_expected_prev[11] !== last_DadosMem_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[11] = DadosMem_expected_prev[11];
	end
	if (
		( DadosMem_expected_prev[12] !== 1'bx ) && ( DadosMem_prev[12] !== DadosMem_expected_prev[12] )
		&& ((DadosMem_expected_prev[12] !== last_DadosMem_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[12] = DadosMem_expected_prev[12];
	end
	if (
		( DadosMem_expected_prev[13] !== 1'bx ) && ( DadosMem_prev[13] !== DadosMem_expected_prev[13] )
		&& ((DadosMem_expected_prev[13] !== last_DadosMem_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[13] = DadosMem_expected_prev[13];
	end
	if (
		( DadosMem_expected_prev[14] !== 1'bx ) && ( DadosMem_prev[14] !== DadosMem_expected_prev[14] )
		&& ((DadosMem_expected_prev[14] !== last_DadosMem_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[14] = DadosMem_expected_prev[14];
	end
	if (
		( DadosMem_expected_prev[15] !== 1'bx ) && ( DadosMem_prev[15] !== DadosMem_expected_prev[15] )
		&& ((DadosMem_expected_prev[15] !== last_DadosMem_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[15] = DadosMem_expected_prev[15];
	end
	if (
		( DadosMem_expected_prev[16] !== 1'bx ) && ( DadosMem_prev[16] !== DadosMem_expected_prev[16] )
		&& ((DadosMem_expected_prev[16] !== last_DadosMem_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[16] = DadosMem_expected_prev[16];
	end
	if (
		( DadosMem_expected_prev[17] !== 1'bx ) && ( DadosMem_prev[17] !== DadosMem_expected_prev[17] )
		&& ((DadosMem_expected_prev[17] !== last_DadosMem_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[17] = DadosMem_expected_prev[17];
	end
	if (
		( DadosMem_expected_prev[18] !== 1'bx ) && ( DadosMem_prev[18] !== DadosMem_expected_prev[18] )
		&& ((DadosMem_expected_prev[18] !== last_DadosMem_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[18] = DadosMem_expected_prev[18];
	end
	if (
		( DadosMem_expected_prev[19] !== 1'bx ) && ( DadosMem_prev[19] !== DadosMem_expected_prev[19] )
		&& ((DadosMem_expected_prev[19] !== last_DadosMem_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[19] = DadosMem_expected_prev[19];
	end
	if (
		( DadosMem_expected_prev[20] !== 1'bx ) && ( DadosMem_prev[20] !== DadosMem_expected_prev[20] )
		&& ((DadosMem_expected_prev[20] !== last_DadosMem_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[20] = DadosMem_expected_prev[20];
	end
	if (
		( DadosMem_expected_prev[21] !== 1'bx ) && ( DadosMem_prev[21] !== DadosMem_expected_prev[21] )
		&& ((DadosMem_expected_prev[21] !== last_DadosMem_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[21] = DadosMem_expected_prev[21];
	end
	if (
		( DadosMem_expected_prev[22] !== 1'bx ) && ( DadosMem_prev[22] !== DadosMem_expected_prev[22] )
		&& ((DadosMem_expected_prev[22] !== last_DadosMem_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[22] = DadosMem_expected_prev[22];
	end
	if (
		( DadosMem_expected_prev[23] !== 1'bx ) && ( DadosMem_prev[23] !== DadosMem_expected_prev[23] )
		&& ((DadosMem_expected_prev[23] !== last_DadosMem_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[23] = DadosMem_expected_prev[23];
	end
	if (
		( DadosMem_expected_prev[24] !== 1'bx ) && ( DadosMem_prev[24] !== DadosMem_expected_prev[24] )
		&& ((DadosMem_expected_prev[24] !== last_DadosMem_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[24] = DadosMem_expected_prev[24];
	end
	if (
		( DadosMem_expected_prev[25] !== 1'bx ) && ( DadosMem_prev[25] !== DadosMem_expected_prev[25] )
		&& ((DadosMem_expected_prev[25] !== last_DadosMem_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[25] = DadosMem_expected_prev[25];
	end
	if (
		( DadosMem_expected_prev[26] !== 1'bx ) && ( DadosMem_prev[26] !== DadosMem_expected_prev[26] )
		&& ((DadosMem_expected_prev[26] !== last_DadosMem_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[26] = DadosMem_expected_prev[26];
	end
	if (
		( DadosMem_expected_prev[27] !== 1'bx ) && ( DadosMem_prev[27] !== DadosMem_expected_prev[27] )
		&& ((DadosMem_expected_prev[27] !== last_DadosMem_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[27] = DadosMem_expected_prev[27];
	end
	if (
		( DadosMem_expected_prev[28] !== 1'bx ) && ( DadosMem_prev[28] !== DadosMem_expected_prev[28] )
		&& ((DadosMem_expected_prev[28] !== last_DadosMem_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[28] = DadosMem_expected_prev[28];
	end
	if (
		( DadosMem_expected_prev[29] !== 1'bx ) && ( DadosMem_prev[29] !== DadosMem_expected_prev[29] )
		&& ((DadosMem_expected_prev[29] !== last_DadosMem_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[29] = DadosMem_expected_prev[29];
	end
	if (
		( DadosMem_expected_prev[30] !== 1'bx ) && ( DadosMem_prev[30] !== DadosMem_expected_prev[30] )
		&& ((DadosMem_expected_prev[30] !== last_DadosMem_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[30] = DadosMem_expected_prev[30];
	end
	if (
		( DadosMem_expected_prev[31] !== 1'bx ) && ( DadosMem_prev[31] !== DadosMem_expected_prev[31] )
		&& ((DadosMem_expected_prev[31] !== last_DadosMem_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DadosMem[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DadosMem_expected_prev);
		$display ("     Real value = %b", DadosMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DadosMem_exp[31] = DadosMem_expected_prev[31];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( SaidaULA_expected_prev[0] !== 1'bx ) && ( SaidaULA_prev[0] !== SaidaULA_expected_prev[0] )
		&& ((SaidaULA_expected_prev[0] !== last_SaidaULA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[0] = SaidaULA_expected_prev[0];
	end
	if (
		( SaidaULA_expected_prev[1] !== 1'bx ) && ( SaidaULA_prev[1] !== SaidaULA_expected_prev[1] )
		&& ((SaidaULA_expected_prev[1] !== last_SaidaULA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[1] = SaidaULA_expected_prev[1];
	end
	if (
		( SaidaULA_expected_prev[2] !== 1'bx ) && ( SaidaULA_prev[2] !== SaidaULA_expected_prev[2] )
		&& ((SaidaULA_expected_prev[2] !== last_SaidaULA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[2] = SaidaULA_expected_prev[2];
	end
	if (
		( SaidaULA_expected_prev[3] !== 1'bx ) && ( SaidaULA_prev[3] !== SaidaULA_expected_prev[3] )
		&& ((SaidaULA_expected_prev[3] !== last_SaidaULA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[3] = SaidaULA_expected_prev[3];
	end
	if (
		( SaidaULA_expected_prev[4] !== 1'bx ) && ( SaidaULA_prev[4] !== SaidaULA_expected_prev[4] )
		&& ((SaidaULA_expected_prev[4] !== last_SaidaULA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[4] = SaidaULA_expected_prev[4];
	end
	if (
		( SaidaULA_expected_prev[5] !== 1'bx ) && ( SaidaULA_prev[5] !== SaidaULA_expected_prev[5] )
		&& ((SaidaULA_expected_prev[5] !== last_SaidaULA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[5] = SaidaULA_expected_prev[5];
	end
	if (
		( SaidaULA_expected_prev[6] !== 1'bx ) && ( SaidaULA_prev[6] !== SaidaULA_expected_prev[6] )
		&& ((SaidaULA_expected_prev[6] !== last_SaidaULA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[6] = SaidaULA_expected_prev[6];
	end
	if (
		( SaidaULA_expected_prev[7] !== 1'bx ) && ( SaidaULA_prev[7] !== SaidaULA_expected_prev[7] )
		&& ((SaidaULA_expected_prev[7] !== last_SaidaULA_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[7] = SaidaULA_expected_prev[7];
	end
	if (
		( SaidaULA_expected_prev[8] !== 1'bx ) && ( SaidaULA_prev[8] !== SaidaULA_expected_prev[8] )
		&& ((SaidaULA_expected_prev[8] !== last_SaidaULA_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[8] = SaidaULA_expected_prev[8];
	end
	if (
		( SaidaULA_expected_prev[9] !== 1'bx ) && ( SaidaULA_prev[9] !== SaidaULA_expected_prev[9] )
		&& ((SaidaULA_expected_prev[9] !== last_SaidaULA_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[9] = SaidaULA_expected_prev[9];
	end
	if (
		( SaidaULA_expected_prev[10] !== 1'bx ) && ( SaidaULA_prev[10] !== SaidaULA_expected_prev[10] )
		&& ((SaidaULA_expected_prev[10] !== last_SaidaULA_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[10] = SaidaULA_expected_prev[10];
	end
	if (
		( SaidaULA_expected_prev[11] !== 1'bx ) && ( SaidaULA_prev[11] !== SaidaULA_expected_prev[11] )
		&& ((SaidaULA_expected_prev[11] !== last_SaidaULA_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[11] = SaidaULA_expected_prev[11];
	end
	if (
		( SaidaULA_expected_prev[12] !== 1'bx ) && ( SaidaULA_prev[12] !== SaidaULA_expected_prev[12] )
		&& ((SaidaULA_expected_prev[12] !== last_SaidaULA_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[12] = SaidaULA_expected_prev[12];
	end
	if (
		( SaidaULA_expected_prev[13] !== 1'bx ) && ( SaidaULA_prev[13] !== SaidaULA_expected_prev[13] )
		&& ((SaidaULA_expected_prev[13] !== last_SaidaULA_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[13] = SaidaULA_expected_prev[13];
	end
	if (
		( SaidaULA_expected_prev[14] !== 1'bx ) && ( SaidaULA_prev[14] !== SaidaULA_expected_prev[14] )
		&& ((SaidaULA_expected_prev[14] !== last_SaidaULA_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[14] = SaidaULA_expected_prev[14];
	end
	if (
		( SaidaULA_expected_prev[15] !== 1'bx ) && ( SaidaULA_prev[15] !== SaidaULA_expected_prev[15] )
		&& ((SaidaULA_expected_prev[15] !== last_SaidaULA_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[15] = SaidaULA_expected_prev[15];
	end
	if (
		( SaidaULA_expected_prev[16] !== 1'bx ) && ( SaidaULA_prev[16] !== SaidaULA_expected_prev[16] )
		&& ((SaidaULA_expected_prev[16] !== last_SaidaULA_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[16] = SaidaULA_expected_prev[16];
	end
	if (
		( SaidaULA_expected_prev[17] !== 1'bx ) && ( SaidaULA_prev[17] !== SaidaULA_expected_prev[17] )
		&& ((SaidaULA_expected_prev[17] !== last_SaidaULA_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[17] = SaidaULA_expected_prev[17];
	end
	if (
		( SaidaULA_expected_prev[18] !== 1'bx ) && ( SaidaULA_prev[18] !== SaidaULA_expected_prev[18] )
		&& ((SaidaULA_expected_prev[18] !== last_SaidaULA_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[18] = SaidaULA_expected_prev[18];
	end
	if (
		( SaidaULA_expected_prev[19] !== 1'bx ) && ( SaidaULA_prev[19] !== SaidaULA_expected_prev[19] )
		&& ((SaidaULA_expected_prev[19] !== last_SaidaULA_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[19] = SaidaULA_expected_prev[19];
	end
	if (
		( SaidaULA_expected_prev[20] !== 1'bx ) && ( SaidaULA_prev[20] !== SaidaULA_expected_prev[20] )
		&& ((SaidaULA_expected_prev[20] !== last_SaidaULA_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[20] = SaidaULA_expected_prev[20];
	end
	if (
		( SaidaULA_expected_prev[21] !== 1'bx ) && ( SaidaULA_prev[21] !== SaidaULA_expected_prev[21] )
		&& ((SaidaULA_expected_prev[21] !== last_SaidaULA_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[21] = SaidaULA_expected_prev[21];
	end
	if (
		( SaidaULA_expected_prev[22] !== 1'bx ) && ( SaidaULA_prev[22] !== SaidaULA_expected_prev[22] )
		&& ((SaidaULA_expected_prev[22] !== last_SaidaULA_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[22] = SaidaULA_expected_prev[22];
	end
	if (
		( SaidaULA_expected_prev[23] !== 1'bx ) && ( SaidaULA_prev[23] !== SaidaULA_expected_prev[23] )
		&& ((SaidaULA_expected_prev[23] !== last_SaidaULA_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[23] = SaidaULA_expected_prev[23];
	end
	if (
		( SaidaULA_expected_prev[24] !== 1'bx ) && ( SaidaULA_prev[24] !== SaidaULA_expected_prev[24] )
		&& ((SaidaULA_expected_prev[24] !== last_SaidaULA_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[24] = SaidaULA_expected_prev[24];
	end
	if (
		( SaidaULA_expected_prev[25] !== 1'bx ) && ( SaidaULA_prev[25] !== SaidaULA_expected_prev[25] )
		&& ((SaidaULA_expected_prev[25] !== last_SaidaULA_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[25] = SaidaULA_expected_prev[25];
	end
	if (
		( SaidaULA_expected_prev[26] !== 1'bx ) && ( SaidaULA_prev[26] !== SaidaULA_expected_prev[26] )
		&& ((SaidaULA_expected_prev[26] !== last_SaidaULA_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[26] = SaidaULA_expected_prev[26];
	end
	if (
		( SaidaULA_expected_prev[27] !== 1'bx ) && ( SaidaULA_prev[27] !== SaidaULA_expected_prev[27] )
		&& ((SaidaULA_expected_prev[27] !== last_SaidaULA_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[27] = SaidaULA_expected_prev[27];
	end
	if (
		( SaidaULA_expected_prev[28] !== 1'bx ) && ( SaidaULA_prev[28] !== SaidaULA_expected_prev[28] )
		&& ((SaidaULA_expected_prev[28] !== last_SaidaULA_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[28] = SaidaULA_expected_prev[28];
	end
	if (
		( SaidaULA_expected_prev[29] !== 1'bx ) && ( SaidaULA_prev[29] !== SaidaULA_expected_prev[29] )
		&& ((SaidaULA_expected_prev[29] !== last_SaidaULA_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[29] = SaidaULA_expected_prev[29];
	end
	if (
		( SaidaULA_expected_prev[30] !== 1'bx ) && ( SaidaULA_prev[30] !== SaidaULA_expected_prev[30] )
		&& ((SaidaULA_expected_prev[30] !== last_SaidaULA_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[30] = SaidaULA_expected_prev[30];
	end
	if (
		( SaidaULA_expected_prev[31] !== 1'bx ) && ( SaidaULA_prev[31] !== SaidaULA_expected_prev[31] )
		&& ((SaidaULA_expected_prev[31] !== last_SaidaULA_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaULA_expected_prev);
		$display ("     Real value = %b", SaidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SaidaULA_exp[31] = SaidaULA_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module OAC_Lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk2;
reg [7:0] Endereco;
// wires                                               
wire [3:0] ALUControl;
wire [31:0] DadosMem;
wire [31:0] PC;
wire [31:0] SaidaULA;

wire sampler;                             

// assign statements (if any)                          
OAC_Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.ALUControl(ALUControl),
	.clk(clk),
	.clk2(clk2),
	.DadosMem(DadosMem),
	.Endereco(Endereco),
	.PC(PC),
	.SaidaULA(SaidaULA)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// clk2
always
begin
	clk2 = 1'b0;
	clk2 = #2500 1'b1;
	#2500;
end 
// Endereco[ 7 ]
initial
begin
	Endereco[7] = 1'b0;
end 
// Endereco[ 6 ]
initial
begin
	Endereco[6] = 1'b0;
end 
// Endereco[ 5 ]
initial
begin
	Endereco[5] = 1'b0;
end 
// Endereco[ 4 ]
initial
begin
	Endereco[4] = 1'b0;
end 
// Endereco[ 3 ]
initial
begin
	Endereco[3] = 1'b0;
end 
// Endereco[ 2 ]
initial
begin
	Endereco[2] = 1'b0;
end 
// Endereco[ 1 ]
initial
begin
	Endereco[1] = 1'b1;
end 
// Endereco[ 0 ]
initial
begin
	Endereco[0] = 1'b0;
end 

OAC_Lab2_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk2(clk2),
	.Endereco(Endereco),
	.sampler_tx(sampler)
);

OAC_Lab2_vlg_check_tst tb_out(
	.ALUControl(ALUControl),
	.DadosMem(DadosMem),
	.PC(PC),
	.SaidaULA(SaidaULA),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/17/2022 18:48:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    OAC_Lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module OAC_Lab2_vlg_sample_tst(
	F0,
	F1,
	F2,
	F3,
	opALU0,
	opALU1,
	sampler_tx
);
input  F0;
input  F1;
input  F2;
input  F3;
input  opALU0;
input  opALU1;
output sampler_tx;

reg sample;
time current_time;
always @(F0 or F1 or F2 or F3 or opALU0 or opALU1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module OAC_Lab2_vlg_check_tst (
	OP0,
	OP1,
	OP2,
	OP3,
	sampler_rx
);
input  OP0;
input  OP1;
input  OP2;
input  OP3;
input sampler_rx;

reg  OP0_expected;
reg  OP1_expected;
reg  OP2_expected;
reg  OP3_expected;

reg  OP0_prev;
reg  OP1_prev;
reg  OP2_prev;
reg  OP3_prev;

reg  OP0_expected_prev;
reg  OP1_expected_prev;
reg  OP2_expected_prev;
reg  OP3_expected_prev;

reg  last_OP0_exp;
reg  last_OP1_exp;
reg  last_OP2_exp;
reg  last_OP3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	OP0_prev = OP0;
	OP1_prev = OP1;
	OP2_prev = OP2;
	OP3_prev = OP3;
end

// update expected /o prevs

always @(trigger)
begin
	OP0_expected_prev = OP0_expected;
	OP1_expected_prev = OP1_expected;
	OP2_expected_prev = OP2_expected;
	OP3_expected_prev = OP3_expected;
end



// expected OP0
initial
begin
	OP0_expected = 1'bX;
end 

// expected OP1
initial
begin
	OP1_expected = 1'bX;
end 

// expected OP2
initial
begin
	OP2_expected = 1'bX;
end 

// expected OP3
initial
begin
	OP3_expected = 1'bX;
end 
// generate trigger
always @(OP0_expected or OP0 or OP1_expected or OP1 or OP2_expected or OP2 or OP3_expected or OP3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OP0 = %b | expected OP1 = %b | expected OP2 = %b | expected OP3 = %b | ",OP0_expected_prev,OP1_expected_prev,OP2_expected_prev,OP3_expected_prev);
	$display("| real OP0 = %b | real OP1 = %b | real OP2 = %b | real OP3 = %b | ",OP0_prev,OP1_prev,OP2_prev,OP3_prev);
`endif
	if (
		( OP0_expected_prev !== 1'bx ) && ( OP0_prev !== OP0_expected_prev )
		&& ((OP0_expected_prev !== last_OP0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP0_expected_prev);
		$display ("     Real value = %b", OP0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OP0_exp = OP0_expected_prev;
	end
	if (
		( OP1_expected_prev !== 1'bx ) && ( OP1_prev !== OP1_expected_prev )
		&& ((OP1_expected_prev !== last_OP1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP1_expected_prev);
		$display ("     Real value = %b", OP1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OP1_exp = OP1_expected_prev;
	end
	if (
		( OP2_expected_prev !== 1'bx ) && ( OP2_prev !== OP2_expected_prev )
		&& ((OP2_expected_prev !== last_OP2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP2_expected_prev);
		$display ("     Real value = %b", OP2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OP2_exp = OP2_expected_prev;
	end
	if (
		( OP3_expected_prev !== 1'bx ) && ( OP3_prev !== OP3_expected_prev )
		&& ((OP3_expected_prev !== last_OP3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP3_expected_prev);
		$display ("     Real value = %b", OP3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP3_exp = OP3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module OAC_Lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg F0;
reg F1;
reg F2;
reg F3;
reg opALU0;
reg opALU1;
// wires                                               
wire OP0;
wire OP1;
wire OP2;
wire OP3;

wire sampler;                             

// assign statements (if any)                          
OAC_Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.OP0(OP0),
	.OP1(OP1),
	.OP2(OP2),
	.OP3(OP3),
	.opALU0(opALU0),
	.opALU1(opALU1)
);

// F0
initial
begin
	F0 = 1'b0;
end 

// F1
initial
begin
	F1 = 1'b0;
end 

// F2
initial
begin
	F2 = 1'b0;
end 

// F3
initial
begin
	F3 = 1'b0;
end 

// opALU0
initial
begin
	opALU0 = 1'b0;
end 

// opALU1
initial
begin
	opALU1 = 1'b0;
end 

OAC_Lab2_vlg_sample_tst tb_sample (
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.opALU0(opALU0),
	.opALU1(opALU1),
	.sampler_tx(sampler)
);

OAC_Lab2_vlg_check_tst tb_out(
	.OP0(OP0),
	.OP1(OP1),
	.OP2(OP2),
	.OP3(OP3),
	.sampler_rx(sampler)
);
endmodule

